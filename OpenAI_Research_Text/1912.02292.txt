DEEPDOUBLE DESCENT : WHERE BIGGER MODELS AND MORE DATA HURT Preetum Nakkiran Harvard UniversityGal Kapluny Harvard UniversityYamini Bansaly Harvard UniversityTristan Yang Harvard University Boaz Barak Harvard UniversityIlya Sutskever OpenAI ABSTRACT We show that a variety of modern deep learning tasks exhibit a ‚Äúdouble-descent‚Äù phenomenon where, as we increase model size, performance Ô¨Årst gets worse and then gets better. Moreover, we show that double descent occurs not just as a function of model size, but also as a function of the number of training epochs. We unify the above phenomena by deÔ¨Åning a new complexity measure we call theeffective model complexity and conjecture a generalized double descent with respect to this measure. Furthermore, our notion of model complexity allows us to identify certain regimes where increasing (even quadrupling) the number of train samples actually hurts test performance. 1 I NTRODUCTION Figure 1: Left: Train and test error as a function of model size, for ResNet18s of varying width on CIFAR-10 with 15% label noise. Right: Test error, shown for varying train epochs. All models trained using Adam for 4K epochs. The largest model (width 64) corresponds to standard ResNet18. The bias-variance trade-off is a fundamental concept in classical statistical learning theory (e.g., Hastie et al. (2005)). The idea is that models of higher complexity have lower bias but higher variance. According to this theory, once model complexity passes a certain threshold, models ‚ÄúoverÔ¨Åt‚Äù with the variance term dominating the test error, and hence from this point onward, increasing model complexity will only decrease performance (i.e., increase test error). Hence conventional wisdom in classical statistics is that, once we pass a certain threshold, ‚Äúlarger models are worse. ‚Äù However, modern neural networks exhibit no such phenomenon. Such networks have millions of parameters, more than enough to Ô¨Åt even random labels (Zhang et al. (2016)), and yet they perform much better on many tasks than smaller models. Indeed, conventional wisdom among practitioners is that ‚Äúlarger models are better‚Äô ‚Äô (Krizhevsky et al. (2012), Huang et al. (2018), Szegedy et al. Work performed in part while Preetum Nakkiran was interning at OpenAI, with Ilya Sutskever. We especially thank Mikhail Belkin and Christopher Olah for helpful discussions throughout this work. Correspondence Email: preetum@cs.harvard.edu yEqual contribution 1arXiv:1912.02292v1  [cs.LG]  4 Dec 2019Figure 2: Left: Test error as a function of model size and train epochs. The horizontal line corresponds to model-wise double descent‚Äìvarying model size while training for as long as possible. The vertical line corresponds to epoch-wise double descent, with test error undergoing double-descent as train time increases. Right Train error of the corresponding models. All models are Resnet18s trained on CIFAR-10 with 15% label noise, data-augmentation, and Adam for up to 4K epochs. (2015), Radford et al. (2019)). The effect of training time on test performance is also up for debate. In some settings, ‚Äúearly stopping‚Äù improves test performance, while in other settings training neural networks to zero training error only improves performance. Finally, if there is one thing both classical statisticians and deep learning practitioners agree on is ‚Äúmore data is always better‚Äù . In this paper, we present empirical evidence that both reconcile and challenge some of the above ‚Äúconventional wisdoms.‚Äù We show that many deep learning settings have two different regimes. In the under-parameterized regime, where the model complexity is small compared to the number of samples, the test error as a function of model complexity follows the U-like behavior predicted by the classical bias/variance tradeoff. However, once model complexity is sufÔ¨Åciently large to interpolate i.e., achieve (close to) zero training error, then increasing complexity only decreases test error, following the modern intuition of ‚Äúbigger models are better‚Äù. Similar behavior was previously observed in Opper (1995; 2001), Advani & Saxe (2017), Spigler et al. (2018), and Geiger et al. (2019b). This phenomenon was Ô¨Årst postulated in generality by Belkin et al. (2018) who named it ‚Äúdouble descent‚Äù, and demonstrated it for decision trees, random features, and 2-layer neural networks with `2loss, on a variety of learning tasks including MNIST and CIFAR-10. Main contributions. We show that double descent is a robust phenomenon that occurs in a variety of tasks, architectures, and optimization methods (see Figure 1 and Section 5; our experiments are summarized in Table A). Moreover, we propose a much more general notion of ‚Äúdouble descent‚Äù that goes beyond varying the number of parameters. We deÔ¨Åne the effective model complexity (EMC) of a training procedure as the maximum number of samples on which it can achieve close to zero training error. The EMC depends not just on the data distribution and the architecture of the classiÔ¨Åer but also on the training procedure‚Äîand in particular increasing training time will increase the EMC. We hypothesize that for many natural models and learning algorithms, double descent occurs as a function of the EMC. Indeed we observe ‚Äúepoch-wise double descent‚Äù when we keep the model Ô¨Åxed and increase the training time, with performance following a classical U-like curve in the underÔ¨Åtting stage (when the EMC is smaller than the number of samples) and then improving with training time once the EMC is sufÔ¨Åciently larger than the number of samples (see Figure 2). As a corollary, early stopping only helps in the relatively narrow parameter regime of critically parameterized models. Sample non-monotonicity. Finally, our results shed light on test performance as a function of the number of train samples. Since the test error peaks around the point where EMC matches the number of samples (the transition from the underto over-parameterization), increasing the number of samples has the effect of shifting this peak to the right. While in most settings increasing the number of samples decreases error, this shifting effect can sometimes result in a setting where more data is worse! For example, Figure 3 demonstrates cases in which increasing the number of samples by a factor of 4:5results in worse test performance. 2Figure 3: Test loss (per-token perplexity) as a function of Transformer model size (embedding dimension dmodel ) on language translation (IWSLT‚Äò14 German-to-English). The curve for 18k samples is generally lower than the one for 4k samples, but also shifted to the right, since Ô¨Åtting 18k samples requires a larger model. Thus, for some models, the performance for 18k samples is worse than for 4k samples. 2 O UR RESULTS To state our hypothesis more precisely, we deÔ¨Åne the notion of effective model complexity . We deÔ¨Åne atraining procedure Tto be any procedure that takes as input a set S=f(x1;y1);:::; (xn;yn)g of labeled training samples and outputs a classiÔ¨Åer T(S)mapping data to labels. We deÔ¨Åne the effective model complexity ofT(w.r.t. distribution D) to be the maximum number of samples non whichTachieves on average 0training error . DeÔ¨Ånition 1 (Effective Model Complexity) TheEffective Model Complexity (EMC) of a training procedureT, with respect to distribution Dand parameter >0, is deÔ¨Åned as: EMCD;(T) := maxfnjESDn[ErrorS(T(S))]g where ErrorS(M)is the mean error of model Mon train samples S. Our main hypothesis can be informally stated as follows: Hypothesis 1 (Generalized Double Descent hypothesis, informal) For any natural data distributionD, neural-network-based training procedure T, and small  > 0, if we consider the task of predicting labels based on nsamples fromDthen: Under-paremeterized regime. IfEMCD;(T)is sufÔ¨Åciently smaller than n, any perturbation of T that increases its effective complexity will decrease the test error. Over-parameterized regime. IfEMCD;(T)is sufÔ¨Åciently larger than n, any perturbation of T that increases its effective complexity will decrease the test error. Critically parameterized regime. IfEMCD;(T)n, then a perturbation of Tthat increases its effective complexity might decrease or increase the test error. Hypothesis 1 is informal in several ways. We do not have a principled way to choose the parameter (and currently heuristically use = 0:1). We also are yet to have a formal speciÔ¨Åcation for ‚ÄúsufÔ¨Åciently smaller‚Äù and ‚ÄúsufÔ¨Åciently larger‚Äù. Our experiments suggest that there is a critical interval around the interpolation threshold when EMCD;(T) =n: below and above this interval increasing complexity helps performance, while within this interval it may hurt performance. The width of the critical interval depends on both the distribution and the training procedure in ways we do not yet completely understand. We believe Hypothesis 1 sheds light on the interaction between optimization algorithms, model size, and test performance and helps reconcile some of the competing intuitions about them. The main result of this paper is an experimental validation of Hypothesis 1 under a variety of settings, where we considered several natural choices of datasets, architectures, and optimization algorithms, and we changed the ‚Äúinterpolation threshold‚Äù by varying the number of model parameters, the length of training, the amount of label noise in the distribution, and the number of train samples. Model-wise Double Descent. In Section 5, we study the test error of models of increasing size, for a Ô¨Åxed large number of optimization steps. We show that ‚Äúmodel-wise double-descent‚Äù occurs for various modern datasets (CIFAR-10, CIFAR-100, IWSLT‚Äò14 de-en, with varying amounts of label noise), model architectures (CNNs, ResNets, Transformers), optimizers (SGD, Adam), number 3of train samples, and training procedures (data-augmentation, and regularization). Moreover, the peak in test error systematically occurs at the interpolation threshold. In particular, we demonstrate realistic settings in which bigger models are worse . Epoch-wise Double Descent. In Section 6, we study the test error of a Ô¨Åxed, large architecture over the course of training. We demonstrate, in similar settings as above, a corresponding peak in test performance when models are trained just long enough to reach 0train error. The test error of a large model Ô¨Årst decreases (at the beginning of training), then increases (around the critical regime), then decreases once more (at the end of training)‚Äîthat is, training longer can correct overÔ¨Åtting. Sample-wise Non-monotonicity. In Section 7, we study the test error of a Ô¨Åxed model and training procedure, for varying number of train samples. Consistent with our generalized double-descent hypothesis, we observe distinct test behavior in the ‚Äúcritical regime‚Äù, when the number of samples is near the maximum that the model can Ô¨Åt. This often manifests as a long plateau region, in which taking signiÔ¨Åcantly more data might not help when training to completion (as is the case for CNNs on CIFAR-10). Moreover, we show settings (Transformers on IWSLT‚Äò14 en-de), where this manifests as a peak‚Äîand for a Ô¨Åxed architecture and training procedure, more data actually hurts. Remarks on Label Noise. We observe all forms of double descent most strongly in settings with label noise in the train set (as is often the case when collecting train data in the real-world). However, we also show several realistic settings with a test-error peak even without label noise: ResNets (Figure 4a) and CNNs (Figure 20) on CIFAR-100; Transformers on IWSLT‚Äò14 (Figure 8). Moreover, all our experiments demonstrate distinctly different test behavior in the critical regime‚Äî often manifesting as a ‚Äúplateau‚Äù in the test error in the noiseless case which develops into a peak with added label noise. See Section 8 for further discussion. 3 R ELATED WORK Model-wise double descent was Ô¨Årst proposed as a general phenomenon by Belkin et al. (2018). Similar behavior had been observed in Opper (1995; 2001), Advani & Saxe (2017), Spigler et al. (2018), and Geiger et al. (2019b). Subsequently, there has been a large body of work studying the double descent phenomenon. A growing list of papers that theoretically analyze it in the tractable setting of linear least squares regression includes Belkin et al. (2019); Hastie et al. (2019); Bartlett et al. (2019); Muthukumar et al. (2019); Bibas et al. (2019); Mitra (2019); Mei & Montanari (2019). Moreover, Geiger et al. (2019a) provide preliminary results for model-wise double descent in convolutional networks trained on CIFAR-10. Our work differs from the above papers in two crucial aspects: First, we extend the idea of double-descent beyond the number of parameters to incorporate the training procedure under a uniÔ¨Åed notion of ‚ÄúEffective Model Complexity‚Äù, leading to novel insights like epoch-wise double descent and sample non-monotonicity. The notion that increasing train time corresponds to increasing complexity was also presented in Nakkiran et al. (2019). Second, we provide an extensive and rigorous demonstration of double-descent for modern practices spanning a variety of architectures, datasets optimization procedures. An extended discussion of the related work is provided in Appendix C. 4 E XPERIMENTAL SETUP We brieÔ¨Çy describe the experimental setup here; full details are in Appendix B1. We consider three families of architectures: ResNets, standard CNNs, and Transformers. ResNets: We parameterize a family of ResNet18s (He et al. (2016)) by scaling the width (number of Ô¨Ålters) of convolutional layers. SpeciÔ¨Åcally, we use layer widths [k;2k;4k;8k]for varying k. The standard ResNet18 corresponds to k= 64 .Standard CNNs: We consider a simple family of 5-layer CNNs, with 4 convolutional layers of widths [k;2k;4k;8k]for varying k, and a fully-connected layer. For context, the CNN with width k= 64 , can reach over 90% test accuracy on CIFAR-10 with dataaugmentation. Transformers: We consider the 6 layer encoder-decoder from Vaswani et al. (2017), as implemented by Ott et al. (2019). We scale the size of the network by modifying the embedding dimensiondmodel, and setting the width of the fully-connected layers proportionally ( dff= 4dmodel). 1The raw data from our experiments are available at: https://gitlab.com/ harvard-machine-learning/double-descent/tree/master 4For ResNets and CNNs, we train with cross-entropy loss, and the following optimizers: (1) Adam with learning-rate 0:0001 for 4K epochs; (2) SGD with learning rate /1p Tfor 500K gradient steps. We train Transformers for 80K gradient steps, with 10% label smoothing and no drop-out. Label Noise. In our experiments, label noise of probability prefers to training on a samples which have the correct label with probability (1 p), and a uniformly random incorrect label otherwise (label noise is sampled only once and not per epoch). Figure 1 plots test error on the noisy distribution, while the remaining Ô¨Ågures plot test error with respect to the clean distribution (the two curves are just linear rescaling of one another). 5 M ODEL -WISE DOUBLE DESCENT (a)CIFAR-100. There is a peak in test error even with no label noise. (b)CIFAR-10. There is a ‚Äúplateau‚Äù in test error around the interpolation point with no label noise, which develops into a peak for added label noise. Figure 4: Model-wise double descent for ResNet18s. Trained on CIFAR-100 and CIFAR-10, with varying label noise. Optimized using Adam with LR 0:0001 for 4K epochs, and data-augmentation. In this section, we study the test error of models of increasing size, when training to completion (for a Ô¨Åxed large number of optimization steps). We demonstrate model-wise double descent across different architectures, datasets, optimizers, and training procedures. The critical region exhibits distinctly different test behavior around the interpolation point and there is often a peak in test error that becomes more prominent in settings with label noise. For the experiments in this section (Figures 4, 5, 6, 7, 8), notice that all modiÔ¨Åcations which increase the interpolation threshold (such as adding label noise, using data augmentation, and increasing the number of train samples) also correspondingly shift the peak in test error towards larger models. Additional plots showing the early-stopping behavior of these models, and additional experiments showing double descent in settings with no label noise (e.g. Figure 19) are in Appendix E.2. We also observed model-wise double descent for adversarial training, with a prominent robust test error peak even in settings without label noise. See Figure 26 in Appendix E.2. Discussion. Fully understanding the mechanisms behind model-wise double descent in deep neural networks remains an important open question. However, an analog of model-wise double descent occurs even for linear models. A recent stream of theoretical works analyzes this setting (Bartlett et al. (2019); Muthukumar et al. (2019); Belkin et al. (2019); Mei & Montanari (2019); Hastie et al. (2019)). We believe similar mechanisms may be at work in deep neural networks. Informally, our intuition is that for model-sizes at the interpolation threshold, there is effectively only one model that Ô¨Åts the train data and this interpolating model is very sensitive to noise in the 5(a) Without data augmentation.  (b) With data augmentation. Figure 5: Effect of Data Augmentation. 5-layer CNNs on CIFAR10, with and without dataaugmentation. Data-augmentation shifts the interpolation threshold to the right, shifting the test error peak accordingly. Optimized using SGD for 500K steps. See Figure 27 for larger models. Figure 6: SGD vs. Adam. 5-Layer CNNs on CIFAR-10 with no label noise, and no data augmentation. Optimized using SGD for 500K gradient steps, and Adam for 4K epochs. Figure 7: Noiseless settings. 5-layer CNNs on CIFAR-100 with no label noise; note the peak in test error. Trained with SGD and no data augmentation. See Figure 20 for the early-stopping behavior of these models. train set and/or model mis-speciÔ¨Åcation. That is, since the model is just barely able to Ô¨Åt the train data, forcing it to Ô¨Åt even slightly-noisy or mis-speciÔ¨Åed labels will destroy its global structure, and result in high test error. (See Figure 28 in the Appendix for an experiment demonstrating this noise sensitivity, by showing that ensembling helps signiÔ¨Åcantly in the critically-parameterized regime). However for over-parameterized models, there are many interpolating models that Ô¨Åt the train set, and SGD is able to Ô¨Ånd one that ‚Äúmemorizes‚Äù (or ‚Äúabsorbs‚Äù) the noise while still performing well on the distribution. The above intuition is theoretically justiÔ¨Åed for linear models. In general, this situation manifests even without label noise for linear models (Mei & Montanari (2019)), and occurs whenever there 6Figure 8: Transformers on language translation tasks: Multi-head-attention encoderdecoder Transformer model trained for 80k gradient steps with labeled smoothed cross-entropy loss on IWSLT‚Äò14 Germanto-English (160K sentences) and WMT‚Äò14 English-to-French (subsampled to 200K sentences) dataset. Test loss is measured as pertoken perplexity. ismodel mis-speciÔ¨Åcation between the structure of the true distribution and the model family. We believe this intuition extends to deep learning as well, and it is consistent with our experiments. 6 E POCH -WISE DOUBLE DESCENT In this section, we demonstrate a novel form of double-descent with respect to training epochs, which is consistent with our uniÔ¨Åed view of effective model complexity (EMC) and the generalized double descent hypothesis. Increasing the train time increases the EMC‚Äîand thus a sufÔ¨Åciently large model transitions from underto over-parameterized over the course of training. Figure 9: Left: Training dynamics for models in three regimes. Models are ResNet18s on CIFAR10 with 20% label noise, trained using Adam with learning rate 0:0001 , and data augmentation. Right: Test error over (Model size Epochs). Three slices of this plot are shown on the left. As illustrated in Figure 9, sufÔ¨Åciently large models can undergo a ‚Äúdouble descent‚Äù behavior where test error Ô¨Årst decreases then increases near the interpolation threshold, and then decreases again. In contrast, for ‚Äúmedium sized‚Äù models, for which training to completion will only barely reach 0 error, the test error as a function of training time will follow a classical U-like curve where it is better to stop early. Models that are too small to reach the approximation threshold will remain in the ‚Äúunder parameterized‚Äù regime where increasing train time monotonically decreases test error. Our experiments (Figure 10) show that many settings of dataset and architecture exhibit epoch-wise double descent, in the presence of label noise. Further, this phenomenon is robust across optimizer variations and learning rate schedules (see additional experiments in Appendix E.1). As in modelwise double descent, the test error peak is accentuated with label noise. Conventional wisdom suggests that training is split into two phases: (1) In the Ô¨Årst phase, the network learns a function with a small generalization gap (2) In the second phase, the network starts to over-Ô¨Åt the data leading to an increase in test error. Our experiments suggest that this is not the complete picture‚Äîin some regimes, the test error decreases again and may achieve a lower value at the end of training as compared to the Ô¨Årst minimum (see Fig 10 for 10% label noise). 7(a) ResNet18 on CIFAR10.  (b) ResNet18 on CIFAR100.  (c) 5-layer CNN on CIFAR 10. Figure 10: Epoch-wise double descent for ResNet18 and CNN (width=128). ResNets trained using Adam with learning rate 0:0001 , and CNNs trained with SGD with inverse-squareroot learning rate. 7 S AMPLE -WISE NON-MONOTONICITY In this section, we investigate the effect of varying the number of train samples, for a Ô¨Åxed model and training procedure. Previously, in model-wise and epoch-wise double descent, we explored behavior in the critical regime, where EMCD;(T)n, by varying the EMC. Here, we explore the critical regime by varying the number of train samples n. By increasing n, the same training procedure T can switch from being effectively over-parameterized to effectively under-parameterized. We show that increasing the number of samples has two different effects on the test error vs. model complexity graph. On the one hand, (as expected) increasing the number of samples shrinks the area under the curve. On the other hand, increasing the number of samples also has the effect of ‚Äúshifting the curve to the right‚Äù and increasing the model complexity at which test error peaks. (a) Model-wise double descent for 5-layer CNNs on CIFAR-10, for varying dataset sizes. Top: There is a range of model sizes (shaded green) where training on 2more samples does not improve test error. Bottom: There is a range of model sizes (shaded red) where training on 4 more samples does not improve test error. (b)Sample-wise non-monotonicity. Test loss (per-word perplexity) as a function of number of train samples, for two transformer models trained to completion on IWSLT‚Äô14. For both model sizes, there is a regime where more samples hurt performance. Compare to Figure 3, of model-wise double-descent in the identical setting. Figure 11: Sample-wise non-monotonicity. 8These twin effects are shown in Figure 11a. Note that there is a range of model sizes where the effects ‚Äúcancel out‚Äù‚Äîand having 4more train samples does not help test performance when training to completion. Outside the critically-parameterized regime, for sufÔ¨Åciently underor overparameterized models, having more samples helps. This phenomenon is corroborated in Figure 12, which shows test error as a function of both model and sample size, in the same setting as Figure 11a. Figure 12: Left: Test Error as a function of model size and number of train samples, for 5-layer CNNs on CIFAR-10 + 20% noise. Note the ridge of high test error again lies along the interpolation threshold. Right: Three slices of the left plot, showing the effect of more data for models of different sizes. Note that, when training to completion, more data helps for small and large models, but does not help for near-critically-parameterized models (green). In some settings, these two effects combine to yield a regime of model sizes where more data actually hurts test performance as in Figure 3 (see also Figure 11b). Note that this phenomenon is not unique to DNNs: more data can hurt even for linear models (see Appendix D). 8 C ONCLUSION AND DISCUSSION We introduce a generalized double descent hypothesis: models and training procedures exhibit atypical behavior when their Effective Model Complexity is comparable to the number of train samples. We provide extensive evidence for our hypothesis in modern deep learning settings, and show that it is robust to choices of dataset, architecture, and training procedures. In particular, we demonstrate ‚Äúmodel-wise double descent‚Äù for modern deep networks and characterize the regime where bigger models can perform worse. We also demonstrate ‚Äúepoch-wise double descent,‚Äù which, to the best of our knowledge, has not been previously proposed. Finally, we show that the double descent phenomenon can lead to a regime where training on more data leads to worse test performance. Preliminary results suggest that double descent also holds as we vary the amount of regularization for a Ô¨Åxed model (see Figure 22). We also believe our characterization of the critical regime provides a useful way of thinking for practitioners‚Äîif a model and training procedure are just barely able to Ô¨Åt the train set, then small changes to the model or training procedure may yield unexpected behavior (e.g. making the model slightly larger or smaller, changing regularization, etc. may hurt test performance). Early stopping. We note that many of the phenomena that we highlight often do not occur with optimal early-stopping. However, this is consistent with our generalized double descent hypothesis: if early stopping prevents models from reaching 0train error then we would not expect to see doubledescent, since the EMC does not reach the number of train samples. Further, we show at least one 9setting where model-wise double descent can still occur even with optimal early stopping (ResNets on CIFAR-100 with no label noise, see Figure 19). We have not observed settings where more data hurts when optimal early-stopping is used. However, we are not aware of reasons which preclude this from occurring. We leave fully understanding the optimal early stopping behavior of double descent as an important open question for future work. Label Noise. In our experiments, we observe double descent most strongly in settings with label noise. However, we believe this effect is not fundamentally about label noise, but rather about model mis-speciÔ¨Åcation . For example, consider a setting where the label noise is not truly random, but rather pseudorandom (with respect to the family of classiÔ¨Åers being trained). In this setting, the performance of the Bayes optimal classiÔ¨Åer would not change (since the pseudorandom noise is deterministic, and invertible), but we would observe an identical double descent as with truly random label noise. Thus, we view adding label noise as merely a proxy for making distributions ‚Äúharder‚Äù‚Äî i.e. increasing the amount of model mis-speciÔ¨Åcation. Other Notions of Model Complexity. Our notion of Effective Model Complexity is related to classical complexity notions such as Rademacher complexity, but differs in several crucial ways: (1) EMC depends on the true labels of the data distribution, and (2) EMC depends on the training procedure, not just the model architecture. Other notions of model complexity which do not incorporate features (1) and (2) would not sufÔ¨Åce to characterize the location of the double-descent peak. Rademacher complexity, for example, is determined by the ability of a model architecture to Ô¨Åt a randomly-labeled train set. But Rademacher complexity and VC dimension are both insufÔ¨Åcient to determine the model-wise double descent peak location, since they do not depend on the distribution of labels‚Äî and our experiments show that adding label noise shifts the location of the peak. Moreover, both Rademacher complexity and VC dimension depend only on the model family and data distribution, and not on the training procedure used to Ô¨Ånd models. Thus, they are not capable of capturing train-time double-descent effects, such as ‚Äúepoch-wise‚Äù double descent, and the effect of data-augmentation on the peak location. ACKNOWLEDGMENTS We thank Mikhail Belkin for extremely useful discussions in the early stages of this work. We thank Christopher Olah for suggesting the Model Size Epoch visualization, which led to the investigation of epoch-wise double descent, as well as for useful discussion and feedback. We also thank Alec Radford, Jacob Steinhardt, and Vaishaal Shankar for helpful discussion and suggestions. P.N. thanks OpenAI, the Simons Institute, and the Harvard Theory Group for a research environment that enabled this kind of work. We thank Dimitris Kalimeris, Benjamin L. Edelman, and Sharon Qian, and Aditya Ramesh for comments on an early draft of this work. This work supported in part by NSF grant CAREER CCF 1452961, BSF grant 2014389, NSF USICCS proposal 1540428, a Google Research award, a Facebook research award, a Simons Investigator Award, a Simons Investigator Fellowship, and NSF Awards CCF 1715187, CCF 1565264, CCF 1301976, IIS 1409097, and CNS 1618026. Y .B. would like to thank the MIT-IBM Watson AI Lab for contributing computational resources for experiments. 