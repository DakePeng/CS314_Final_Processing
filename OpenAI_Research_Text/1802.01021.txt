DeepType: Multilingual Entity Linking by Neural Type System Evolution Jonathan Raiman OpenAI San Francisco, California raiman@openai.comOlivier Raiman Agilience Paris, France or@agilience.com Abstract The wealth of structured (e.g. Wikidata) and unstructured data about the world available today presents an incredible opportunity for tomorrow‚Äôs ArtiÔ¨Åcial Intelligence. So far, integration of these two different modalities is a difÔ¨Åcult process, involving many decisions concerning how best to represent the information so that it will be captured or useful, and hand-labeling large amounts of data. DeepType overcomes this challenge by explicitly integrating symbolic information into the reasoning process of a neural network with a type system. First we construct a type system, and second, we use it to constrain the outputs of a neural network to respect the symbolic structure. We achieve this by reformulating the design problem into a mixed integer problem: create a type system and subsequently train a neural network with it. In this reformulation discrete variables select which parent-child relations from an ontology are types within the type system, while continuous variables control a classiÔ¨Åer Ô¨Åt to the type system. The original problem cannot be solved exactly, so we propose a 2-step algorithm: 1) heuristic search or stochastic optimization over discrete variables that deÔ¨Åne a type system informed by an Oracle and a Learnability heuristic, 2) gradient descent to Ô¨Åt classiÔ¨Åer parameters. We apply DeepType to the problem of Entity Linking on three standard datasets (i.e. WikiDisamb30, CoNLL (YAGO), TAC KBP 2010) and Ô¨Ånd that it outperforms all existing solutions by a wide margin, including approaches that rely on a human-designed type system or recent deep learning-based entity embeddings, while explicitly using symbolic information lets it integrate new entities without retraining. 1 Introduction Online encyclopedias, knowledge bases, ontologies (e.g. Wikipedia, Wikidata, Wordnet), alongside image and video datasets with their associated label and category hierarchies (e.g. Imagenet (Deng et al. 2009), Youtube-8M (Abu-ElHaija et al. 2016), Kinetics (Kay et al. 2017)) offer an unprecedented opportunity for incorporating symbolic representations within distributed and neural representations in ArtiÔ¨Åcial Intelligence systems. Several approaches exist for integrating rich symbolic structures within the behavior of neural networks: a label hierarchy aware loss function that relies on the ultrametric tree distance between labels (e.g. it is worse to confuse sheepdogs and skyscrapers than it is to confuse sheepdogs and poodles) (Wu, Tygert, and LeCun2017), a loss function that trades off speciÔ¨Åcity for accuracy by incorporating hypo/hypernymy relations (Deng et al. 2012), using NER types to constrain the behavior of an Entity Linking system (Ling, Singh, and Weld 2015), or more recently integrating explicit type constraints within a decoder‚Äôs grammar for neural semantic parsing (Krishnamurthy, Dasigi, and Gardner 2017). However, current approaches face several difÔ¨Åculties: Selection of the right symbolic information based on the utility or information gain for a target task. Design of the representation for symbolic information (hierarchy, grammar, constraints). Hand-labelling large amounts of data. DeepType overcomes these difÔ¨Åculties by explicitly integrating symbolic information into the reasoning process of a neural network with a type system that is automatically designed without human effort for a target task. We achieve this by reformulating the design problem into a mixed integer problem: create a type system by selecting roots and edges from an ontology that serve as types in a type system, and subsequently train a neural network with it. The original problem cannot be solved exactly, so we propose a 2-step algorithm: 1. heuristic search or stochastic optimization over the discrete variable assignments controlling type system design, using an Oracle and a Learnability heuristic to ensure that design decisions will be easy to learn by a neural network, and will provide improvements on the target task, 2. gradient descent to Ô¨Åt classiÔ¨Åer parameters to predict the behavior of the type system. In order to validate the beneÔ¨Åts of our approach, we focus on applying DeepType to Entity Linking (EL), the task of resolving ambiguous mentions of entities to their referent entities in a knowledge base (KB) (e.g. Wikipedia). Specifically we compare our results to state of the art systems on three standard datasets (WikiDisamb30, CoNLL (YAGO), TAC KBP 2010). We verify whether our approach can work in multiple languages, and whether optimization of the type system for a particular language generalizes to other languages1by training our full system in a monolingual (English) and bilingual setup (English and French), and also 1e.g. Do we overÔ¨Åt to a particular set of symbolic structures use-arXiv:1802.01021v1  [cs.CL]  3 Feb 2018evaluate our Oracle (performance upper bound) on German and Spanish test datasets. We compare stochastic optimization and heuristic search to solve our mixed integer problem by comparing the Ô¨Ånal performance of systems whose type systems came from different search methodologies. We also investigate whether symbolic information is captured by using DeepType as pretraining for Named Entity Recognition (NER) on two standard datasets (i.e. CoNLL 2003 (Sang and Meulder 2003), OntoNotes 5.0 (CoNLL 2012) (Pradhan et al. 2012)). Our key contributions in this work are as follows: A system for integrating symbolic knowledge into the reasoning process of a neural network through a type system, to constrain the behavior to respect the desired symbolic structure, and automatically design the type system without human effort. An approach to EL that uses type constraints, reduces disambiguation resolution complexity from O(N2)to O(N), incorporates new entities into the system without retraining, and outperforms all existing solutions by a wide margin. We release code for designing, evolving, and training neural type systems2. Moreover, we observe that disambiguation accuracy reaches 99.0% on CoNLL (YAGO) and 98.6% on TAC KBP 2010 when entity types are predicted by an Oracle, suggesting that EL would be almost solved if we can improve type prediction accuracy. The rest of this paper is structured as follows. In Section 2 we introduce EL and EL with Types, in Section 3 we describe DeepType for EL, In Section 4 we provide experimental results for DeepType applied to EL and evidence of cross-lingual and cross-domain transfer of the representation learned by a DeepType system. In Section 5 we relate our work to existing approaches. Conclusions and directions for future work are given in Section 6. 2 Task Before we deÔ¨Åne how DeepType can be used to constrain the outputs of a neural network using a type system, we will Ô¨Årst deÔ¨Åne the goal task of Entity Linking. Entity Linking The goal is to recover the ground truth entities in a KB referred to in a document by locating mentions (text spans), and for each mention properly disambiguating the referent entity. Commonly, a lookup table that maps each mention to a proposal set of entities for each mention m: Em=fe1;:::;eng(e.g. ‚ÄúWashington‚Äù could mean Washington, D.C. orGeorge Washington ). Disambiguation is Ô¨Ånding for each mention mthe a ground truth entity eGTin Em. Typically, disambiguation operates according to two criteria: in a large corpus, how often does a mention point to an entity, LinkCount( m;e), and how often does entity e1cooccur with entity e2, anO(N2)process, often named coherful only in English, or can we discover a knowledge representation that works across languages? 2http://github.com/openai/deeptypeence (Milne and Witten 2008; Ferragina and Scaiella 2010; Yamada et al. 2016). Entity Linking with Types In this work we extend the EL task to associate with each entity a series of types (e.g. Person ,Place , etc.) that if known, would rule out invalid answers, and therefore ease linking (e.g. the context now enables types to disambiguate ‚ÄúWashington‚Äù). Knowledge of the types Tassociated with a mention can also help prune entities from the the proposal set, to produce a constrained set: Em;T Em. In a probabilistic setting it is also possible to rank an entity ein documentxaccording to its likelihood under the type system prediction and under the entity model: P(ejx)/Ptype(types(e)jx)Pentity (ejx;types(e)):(1) In prior work, the 112 FIGER Types (Ling and Weld 2012) were associated with entities to combine an NER tagger with an EL system (Ling, Singh, and Weld 2015). In their work, they found that regular NER types were unhelpful, while Ô¨Åner grain FIGER types improved system performance. 3 DeepType for Entity Linking DeepType is a strategy for integrating symbolic knowledge into the reasoning process of a neural network through a type system. When we apply this technique to EL, we constrain the behavior of an entity prediction model to respect the symbolic structure deÔ¨Åned by types. As an example, when we attempt to disambiguate ‚ÄúJaguar‚Äù the beneÔ¨Åts of this approach are apparent: our decision can be based on whether the predicted type is Animal or Road Vehicle as shown visually in Figure 1. In this section, we will Ô¨Årst deÔ¨Åne key terminology, then explain the model and its sub-components separately. Terminology Relation Given some knowledge graph or feature set, a relation is a set of inheritance rules that deÔ¨Åne membership or exclusion from a particular group. For instance the relation instance of( city)selects all children of the root city connected by instance of as members of the group, depicted by outlined boxes in Figure 2. Type In this work a type is a label deÔ¨Åned by a relation (e.g.IsHuman is the type applied to all children of Human connected by instance of ). Type Axis A set of mutually exclusive types (e.g. IsHuman^IsPlant =fg). Type System A grouping of type axes, A, along with a type labelling function: ft1;:::;tkg= TypeLabeler( e;A). For instance a type system with two axes fIsA,Topicg assigns to George Washington :fPerson ,Politicsg, and to Washington, D.C. :fPlace ,Geographyg). Model To construct an EL system that uses type constraints we require: a type system, the associated type classiÔ¨Åer, and aThe prey saw a jaguar cross in the jungle.ajaguarcrosstheJunglesawpreyWord embeddingFully-connected layerconcatdropoutFCIs Animal?/u1D70EStacked Bi-LSTMdropout‚Ä¶Word 1Word nFCFC‚Ä¶softmaxsoftmaxType 1Type k‚Ä¶ Type relation rootChild entity, membernon-member entityactive edge‚Ä¶ inactive edge The man saw a Jaguar speed on the highway. AnimalRoad vehicleRegionPhysical Object1.00.0Type Probability0.9995e-72e-700.5AnimalRoad vehicleRegionPhysical Object4e-34e-30.350.24AnimalRoad vehicleRegionPhysical Object0.250.561e-52e-3AnimalRoad vehicleRegionPhysical Object1e-43e-21e-30.80‚Äújungle‚Äù‚Äújaguar‚Äù‚ÄúJaguar‚Äù‚Äúhighway‚ÄùSentence EntityjaguarJaguar junglejunglejaguarJaguarhighwayHighwayTypeAnimalRoad vehicleRegionMusicAnimalRoad vehiclePhysical ObjectFilmonly link Prob.0.290.600.350.170.290.600.850.04Prob. w/. types1.00.01.00.00.01.01.00.0instance ofcityParisFortalezaAlhambrainstance ofMona Lisalocated ininstance of subclass ofhuman settlementneighborhoodkibbutzsubclass ofUpper East Sideinstance ofFigure 1: Example model output: ‚Äújaguar‚Äù refers to different entities depending on context. Predicting the type associated with each word (e.g. animal, region, etc.) helps eliminate options that do not match, and recover the true entity. Bar charts give the system‚Äôs belief over the type-axis ‚Äú IsA‚Äù, and the table shows how types affects entity probabilities given by Wikipedia links. The prey saw a jaguar cross in the jungle.ajaguarcrosstheJunglesawpreyWord embeddingFully-connected layerconcatdropoutFCIs Animal?/u1D70EStacked Bi-LSTMdropout‚Ä¶Word 1Word nFCFC‚Ä¶softmaxsoftmaxType 1Type k‚Ä¶ Type relation rootChild entity, membernon-member entityactive edge‚Ä¶ inactive edge The man saw a Jaguar speed on the highway. AnimalRoad vehicleRegionPhysical Object1.00.0Type Probability0.9995e-72e-700.5AnimalRoad vehicleRegionPhysical Object4e-34e-30.350.24AnimalRoad vehicleRegionPhysical Object0.250.561e-52e-3AnimalRoad vehicleRegionPhysical Object1e-43e-21e-30.80‚Äújungle‚Äù‚Äújaguar‚Äù‚ÄúJaguar‚Äù‚Äúhighway‚ÄùSentence Entityjaguar(feline)JaguarMotorsjungle(forest)jungle(music)jaguar(feline)JaguarMotorshighway(road)Highway(Ô¨Ålm)only link Prob.0.290.600.350.170.290.600.850.04Prob. w/. types1.00.01.00.00.01.01.00.0instance ofcityParisFortalezaAlhambrainstance ofMona Lisalocated ininstance of subclass ofhuman settlementneighborhoodkibbutzsubclass ofUpper East Sideinstance of Figure 2: DeÔ¨Åning group membership with a knowledge graph relation: children of root (city) via edge (instance of). model for predicting and ranking entities given a mention. Instead of assuming we receive a type system, classiÔ¨Åer, entity prediction model, we will instead create the type system and its classiÔ¨Åer starting from a given entity prediction model and ontology with text snippets containing entity mentions (e.g. Wikidata and Wikipedia). For simplicity we useLinkCount( e;m)as our entity prediction model. We restrict the types in our type systems to use a set of parent-child relations over the ontology in Wikipedia and Wikidata, where each type axis has a root node rand an edge typeg, that sets membership or exclusion from the axis (e.g.r=human;e=instance of , splits entities into: human vs. non-human3). We then reformulate the problem into a mixed integer problem, where discrete variables control which roots r1;:::;rkand edge types g1;:::;gkamong all rootsRand edge typesGwill deÔ¨Åne type axes, while the continuous variablesparametrize a classiÔ¨Åer Ô¨Åt to the type system. Our goal in type system design is to select parent-child relations that a classiÔ¨Åer easily predicts, and where the types improve disambiguation accuracy. Objective To formally deÔ¨Åne our mixed integer problem, let us Ô¨Årst denoteAas the assignment for the discrete vari3Type ‚Äú instance of :human ‚Äù mimics the NER PER label.ables that deÔ¨Åne our type system (i.e. boolean variables deÔ¨Åning if a parent-child relation gets included in our type system), as the parameters for our entity prediction model and type classiÔ¨Åer, and Smodel (A;)as the disambiguation accuracy given a test corpus containing mentionsM= (m0;eGT 0;Em0);:::; (mn;eGT n;Emn)	 . We now assume our model produces some score for each proposed entity egiven a mention min a documentD, deÔ¨Åned EntityScore( e;m;D;A;). The predicted entity for a given mention is thus: e= argmaxe2EmEntityScore( e;m;D;A;). Ife=eGT, the mention is disambiguated. Our problem is thus deÔ¨Åned as: max Amax Smodel (A;) =P (m;eGT;Em)2M1eGT(e) jMj:(2) This original formulation cannot be solved exactly4. To make this problem tractable we propose a 2-step algorithm: 1.Discrete Optimization of Type System : Heuristic search or stochastic optimization over the discrete variables of the type system,A, informed by a Learnability heuristic and an Oracle. 2.Type classiÔ¨Åer : Gradient descent over continuous variablesto Ô¨Åt type classiÔ¨Åer and entity prediction model. We will now explain in more detail discrete optimization of a type system, our heuristics (Oracle and Learnability heuristic), the type classiÔ¨Åer, and inference in this model. Discrete Optimization of a Type System The original objective Smodel (A;)cannot be solved exactly, thus we rely on heuristic search or stochastic optimization to Ô¨Ånd suitable assignments for A. To avoid training an entire type classiÔ¨Åer and entity prediction model for each evaluation of the objective function, we instead use a 4There are22:4107choices if each Wikipedia article can be a type within our type system.proxy objective Jfor the discrete optimization5. To ensure that maximizing J(A)also maximizes Smodel (A;), we introduce a Learnability heuristic and an Oracle that quantify the disambiguation power of a proposed type system, an estimate of how learnable the type axes in the selected solution will be. We measure an upper bound for the disambiguation power by measuring disambiguation accuracy Soracle for a type classiÔ¨Åer Oracle over a test corpus. To ensure that the additional disambiguation power of a solutionAtranslates in practice we weigh by an estimate of solution‚Äôs learnability Learnability(A)improvements betweenSoracle and the accuracy of a system that predicts only according to the entity prediction model6,Sgreedy . Selecting a large number of type axes will provide strong disambiguation power, but may lead to degenerate solutions that are harder to train, slow down inference, and lack higher-level concepts that provide similar accuracy with less axes. We prevent this by adding a per type axis penalty of . Combining these three terms gives us the equation for J: J(A) =(Soracle Sgreedy )Learnability(A) + Sgreedy jAj:(3) Oracle Our Oracle is a methodology for abstracting away machine learning performance from the underlying representational power of a type system A. It operates on a test corpus with a set of mentions, entities, and proposal sets: mi;eGT i;Emi. The Oracle prunes each proposal set to only contain entities whose types match those of eGT i, yielding Em;oracle . Types fully disambiguate when jEm;oraclej= 1, otherwise we use the entity prediction model to select the right entity in the remainder set Emi;oracle : Oracle(m) = argmax e2Em;oraclePentity (ejm;types(x)): (4) IfOracle(m) =eGT, the mention is disambiguated. Oracle accuracy is denoted Soracle given a type system over a test corpus containing mentions M =  (m0;eGT 0;Em0);:::; (mn;eGT n;Emn)	 : Soracle =P (m;eGT;Em)2M1eGT(Oracle(m)) jMj:(5) Learnability To ensure that disambiguation gains obtained during the discrete optimization are available when we train our type classiÔ¨Åer, we want to ensure that the types selected are easy to predict. The Learnability heuristic empirically measures the average performance of classiÔ¨Åers at predicting the presence of a type within some LearnabilityspeciÔ¨Åc training set. To efÔ¨Åciently estimate Learnability for a full type system we make an independence assumption and model it as the mean of the Learnability for each individual axis, ignoring positive or negative transfer effects between different type axes. This assumption lets us parallelize training of 5Training of the type classiÔ¨Åer takes 3 days on a Titan X Pascal, while our Oracle can run over the test set in 100ms. 6For an entity prediction model based only on link counts, this means always picking the most linked entity. The prey saw a jaguar cross in the jungle.ajaguarcrosstheJunglesawpreyWord embeddingFully-connected layerconcatdropoutFCIs Animal?/u1D70EStacked Bi-LSTMdropout‚Ä¶Word 1Word nFCFC‚Ä¶softmaxsoftmaxType Axis 1Type Axis k‚Ä¶ Type relation rootChild entity, membernon-member entityactive edge‚Ä¶ inactive edge The man saw a Jaguar speed on the highway. AnimalRoad vehicleRegionPhysical Object1.00.0Type Probability0.9995e-72e-700.5AnimalRoad vehicleRegionPhysical Object4e-34e-30.350.24AnimalRoad vehicleRegionPhysical Object0.250.561e-52e-3AnimalRoad vehicleRegionPhysical Object1e-43e-21e-30.80‚Äújungle‚Äù‚Äújaguar‚Äù‚ÄúJaguar‚Äù‚Äúhighway‚ÄùSentence EntityjaguarJaguar junglejunglejaguarJaguarhighwayHighwayTypeAnimalRoad vehicleRegionMusicAnimalRoad vehiclePhysical ObjectFilmonly link Prob.0.290.600.350.170.290.600.850.04Prob. w/. types1.00.01.00.00.01.01.00.0instance ofcityParisFortalezaAlhambrainstance ofMona Lisalocated ininstance of subclass ofhuman settlementneighborhoodkibbutzsubclass ofUpper East Sideinstance of Knowledge Base / Relations(e.g. Wikidata)greedybeam	searchCross-Entropy	MethodGenetic	AlgorithmhumanType Axis 1Type Axis k‚Ä¶Type Axis 1Type Axis k‚Ä¶Corpus with labels/entities‚Ä®(e.g. Wikipedia)Labeled DataClassiÔ¨Åer(a) The prey saw a jaguar cross in the jungle.ajaguarcrosstheJunglesawpreyWord embeddingFully-connected layerconcatdropoutFCIs Animal?/u1D70EStacked Bi-LSTMdropout‚Ä¶Word 1Word nFCFC‚Ä¶softmaxsoftmaxType Axis 1Type Axis k‚Ä¶ Type relation rootChild entity, membernon-member entityactive edge‚Ä¶ inactive edge The man saw a Jaguar speed on the highway. AnimalRoad vehicleRegionPhysical Object1.00.0Type Probability0.9995e-72e-700.5AnimalRoad vehicleRegionPhysical Object4e-34e-30.350.24AnimalRoad vehicleRegionPhysical Object0.250.561e-52e-3AnimalRoad vehicleRegionPhysical Object1e-43e-21e-30.80‚Äújungle‚Äù‚Äújaguar‚Äù‚ÄúJaguar‚Äù‚Äúhighway‚ÄùSentence EntityjaguarJaguar junglejunglejaguarJaguarhighwayHighwayTypeAnimalRoad vehicleRegionMusicAnimalRoad vehiclePhysical ObjectFilmonly link Prob.0.290.600.350.170.290.600.850.04Prob. w/. types1.00.01.00.00.01.01.00.0instance ofcityParisFortalezaAlhambrainstance ofMona Lisalocated ininstance of subclass ofhuman settlementneighborhoodkibbutzsubclass ofUpper East Sideinstance of(b) Figure 3: Text window classiÔ¨Åer in (a) serves as type Learnability estimator, while the network in (b) takes longer to train, but discovers long-term dependencies to predict types and jointly produces a distribution for multiple type axes. simpler classiÔ¨Åers for each type axis. We measure the area under its receiver operating characteristics curve (AUC) for each classiÔ¨Åer and compute the type system‚Äôs learnability: Learnability(A) =P t2AAUC(t) jAj. We use a text window classiÔ¨Åer trained over windows of 10 words before and after a mention. Words are represented with randomly initialized word embeddings; the classiÔ¨Åer is illustrated in Figure 3a. AUC is averaged over 4 training runs for each type axis. Type ClassiÔ¨Åer After the discrete optimization has completed we now have a type systemA. We can now use this type system to label data in multiple languages from text snippets associated with the ontology7, and supervize a Type classiÔ¨Åer. The goal for this classiÔ¨Åer is to discover long-term dependencies in the input data that let it reliably predict types across many contexts and languages. For this reason we select a bidirectional-LSTM (Lample et al. 2016) with word, preÔ¨Åx, and sufÔ¨Åx embeddings as done in (Andor et al. 2016). Our network is shown pictorially in Figure 3b. Our classiÔ¨Åer is trained to minimize the negative log likelihood of the per-token types for each type axis in the document D withLtokens: Pk i=1logPi(ti;1;:::;ti;LjD). When using Wikipedia as our source of text snippets our label supervision is partial8, so we make a conditional independence assumption about our predictions and use Softmax as our output activation: Pk i=1PL j=1logPi(ti;jjwj;D). Inference At inference-time we incorporate classiÔ¨Åer belief into our decision process by Ô¨Årst running it over the full context and obtaining a belief over each type axis for each input wordw0;:::;wL. For each mention mcovering words wx;:::;wy, we obtain the type conditional probability for all type axes i:fPi(jwx;D);:::;Pi(jwy;D)g. In multiword mentions we must combine beliefs over multiple tokensx:::y : the product of the beliefs over the mention‚Äôs tokens is correct but numerically unstable and slightly less 7Wikidata‚Äôs ontology has cross-links with Wikipedia, IMDB, Discogs, MusicBrainz, and other encyclopaedias with snippets. 8We obtain type labels only on the intra-wiki link anchor text.performant than max-over-time9, which we denote for the i-th type axis: Pi;(jm;D ). The scorese;m;D;A;= EntityScore( e;m;D;A;)of an entityegiven these conditional probability distributions P1;(jm;D );:::;Pk;(jm;D ), and the entities‚Äô types in each axist1;:::;tkcan then be combined to rank entities according to how predicted they were by both the entity prediction model and the type system. The chosen entity e for a mention mis chosen by taking the option that maximizes the score among the Empossible entities; the equation for scoring and eis given below, with PLink(ejm) = LinkCount( m;e)P j2EmLinkCount( m;j),ia per type axis smoothing parameter,is a smoothing parameter over all types: se;m;D;A;=PLink(ejm) 1 + (kY i=1(1 i+iPi;(tijm;D ))) :(6) 4 Results Type System Discovery In the following experiments we evaluate the behavior of different search methodologies for type system discovery: which method best scales to large numbers of types, achieves high accuracy on the target EL task, and whether the choice of search impacts learnability by a classiÔ¨Åer or generalisability to held-out EL datasets. For the following experiments we optimize DeepType‚Äôs type system over a held-out set of 1000 randomly sampled articles taken from the Feb. 2017 English Wikipedia dump, with the Learnability heuristic text window classiÔ¨Åers trained only on those articles. The type classiÔ¨Åer is trained jointly on English and French articles, totalling 800 million tokens for training, 1 million tokens for validation, sampled equally from either language. We restrict rootsRand edgesGto the most common 1:5105entities that are entity parents through wikipedia category orinstance of edges, and eliminate type axes where Learnability()is 0, leaving 53,626 type axes. Human Type System Baseline To isolate discrete optimization from system performance and gain perspective on the difÔ¨Åculty and nature of the type system design we incorporate a human-designed type system. Human designers have access to the full set of entities and relations in Wikipedia and Wikidata, and compose different inheritance rules through Boolean algebra to obtain higher level concepts (e.g. woman =IsHuman^IsFemale , or animal =IsTaxon^:fIsHuman_IsPlantg10). The Ô¨Ånal human system uses 5 type axes11, and 1218 inheritance rules. 9The choice of max-over-time is empirically motivated: we compared product mean, min, max, and found that max was comparable to mean, and slightly better than the alternatives. 10Taxon is the general parent of living items in Wikidata. 11IsA,Topic ,Location ,Continent , andTime .Search methodologies Beam Search and Greedy selection We iteratively construct a type system by choosing among all remaining type axes and evaluating whether the inclusion of a new type axis improves our objective: J(A[ftjg)> J(A). We use a beam size of band stop the search when all solutions stop growing. Cross-Entropy Method (CEM) (Rubinstein 1999) is a stochastic optimization procedure applicable to the selection of types. We begin with a probability vector ~P0set topstart, and at each iteration we sample MCEM vectors~ sfrom the Bernoulli distribution given by ~Pi, and measure each sample‚Äôs Ô¨Åtness with Eq. 3. The NCEM highest Ô¨Åtness elements are our winning population Stat iterationt. Our probabilities are Ô¨Åt toStgivingPt+1=P ~ s2St~ s NCEM. The optimization is complete when the probability vector is binary. Genetic Algorithm The best subset of type axes can be found by representing type axes as genes carried by Npopulation individuals in a population undergoing mutations and crossovers (Harvey 2009) over Ggenerations. We select individuals using Eq. 3 as our Ô¨Åtness function. Search Methodology Performance Impact To validate thatcontrols type system size, and Ô¨Ånd the best tradeoff between size and accuracy, we experiment with a range of values and Ô¨Ånd that accuracy grows more slowly below 0.00007, while system size still increases. From this point on we keep = 0:00007 , and we compare the number of iterations needed by different search methods to converge, against two baselines: the empty set and the mean performance of 100 randomly sampled sets of 128 types (Table 1a). We observe that the performance of stochastic optimizers GA and CEM is similar to heuristic search, but requires orders of magnitude less function evaluations. Next, we compare the behavior of the different search methods to a human designed system and state of the art approaches on three standard datasets (i.e. W IKI-DISAMB 30 (WKD30) (Ferragina and Scaiella 2010)12, CoNLL(YAGO) (Hoffart et al. 2011), and TAC KBP 2010 (Ji et al. 2010)), along with test sets built by randomly sampling 1000 articles from Wikipedia‚Äôs February 2017 dump in English, French, German, and Spanish which were excluded from training the classiÔ¨Åers. Table 1c has Oracle performance for the different search methods on the test sets, where we report disambiguation accuracy per annotation. A LinkCount baseline is included that selects the mention‚Äôs most frequently linked entity13. All search techniques‚Äô Oracle ac12We apply the preprocessing and link pruning as (Ferragina and Scaiella 2010) to ensure the comparison is fair. 13Note that LinkCount accuracy is stronger than the one found in (Ferragina and Scaiella 2010) or (Milne and Witten 2008) because newer Wikipedia dumps improve link coverage and reduce link distribution noisiness.Table 1: Method comparisons. Highest value in bold , excluding oracles. (a) Type system discovery method comparison Approach Evals Accuracy Items BeamSearch 5:1210797.84 130 Greedy 6:4010697.83 130 GA 116;000 96.959 128 CEM 43;000 96.26 89 Random N/A 92:90:28 128 No types 0 92:10 0(b) NER F1 score comparison for DeepType pretraining vs. baselines. ModelCoNLL 2003 OntoNotes Dev Test Dev Test Bi-LSTM-76.29 -77.77(Chiu and Nichols 2015) Bi-LSTM-CNN + emb + lex94.31 91.62 84.57 86.28(Chiu and Nichols 2015) Bi-LSTM (Ours) 89.49 83.40 82.75 81.03 Bi-LSTM-CNN (Ours) 90.54 84.74 83.17 82.35 Bi-LSTM-CNN (Ours) + types 93.54 88.67 85.11 83.12 (c) Entity Linking model Comparison. SigniÔ¨Åcant improvements over prior work denoted byforp< 0:05, andforp< 0:01. Model enwiki frwiki dewiki eswiki WKD30 CoNLL TAC 2010 M&W(Milne and Witten 2008) 84.6 TagMe (Ferragina and Scaiella 2010) 83.224 80.711 90.9 (Globerson et al. 2016) 91.7 87.2 (Yamada et al. 2016) 91.5 85.2 NTEE (Yamada et al. 2017) 87.7 LinkCount only 89.06492.013 92.01389.980 82.710 68.614 81.485Oursmanual 94.33192.967 91.88893.10890.743 manual (oracle) 97.734 98.026 98.632 98.178 95.872 98.217 98.601 greedy 93.72592.984 92.37594.15190.850 greedy (oracle) 98.002 97.222 97.915 98.246 97.293 98.982 98.278 CEM 93.70792.415 92.24793.96290.302 CEM (oracle) 97.500 96.648 97.480 97.599 96.481 99.005 96.767 GA 93.68492.027 92.06294.87990.312 GA (oracle) 97.297 96.783 97.408 97.609 96.268 98.461 96.663 GA (English only) 93.02991.74393.701curacy signiÔ¨Åcantly improve over LinkCount , and achieve near perfect accuracy on all datasets (97-99%); furthermore we notice that performance between the held-out Wikipedia sets and standard datasets sets is similar, supporting the claim that the discovered type systems generalize well. We note that machine discovered type systems outperform human designed systems: CEM beats the human type system on English Wikipedia, and all search method‚Äôs type systems outperform human systems on W IKI-DISAMB 30, CoNLL(YAGO), and TAC KBP 2010. Search Methodology Learnability Impact To understand whether the type systems produced by different search methods can be trained similarly well we compare the type system built by GA, CEM, greedy, and the one constructed manually. EL Disambiguation accuracy is shown in Table 1c, where we compare with recent deep-learning based approaches (Globerson et al. 2016), or recent work by Yamada et al. for embedding word and entities (Yamada et al. 2016), or documents and entities (Yamada et al. 2017), along with count and coherence based techniques Tagme (Ferragina and Scaiella 2010) and Milne & Witten (Milne and Witten 2008). To obtain Tagme‚Äôs Feb. 2017 Wikipediaaccuracy we query the public web API14available in German and English, while other methods can be compared on CoNLL(YAGO) and TAC KBP 2010. Models trained on a human type system outperform all previous approaches to entity linking, while type systems discovered by machines lead to even higher performance on all datasets except English Wikipedia. Cross-Lingual Transfer Type systems are deÔ¨Åned over Wikidata/Wikipedia, a multilingual knowledge base/encyclopaedia, thus type axes are language independent and can produce cross-lingual supervision. To verify whether this cross-lingual ability is useful we train a type system on an English dataset and verify whether it can successfully supervize French data. We also measure using the Oracle (performance upper bound) whether the type system is useful in Spanish or German. Oracle performance across multiple languages does not appear to degrade when transferring to other languages (Table 1c). We also notice that training in French with an English type system still yields improvements over LinkCount for CEM, greedy, and human systems. 14https://tagme.d4science.org/tagme/Because multi-lingual training might oversubscribe the model, we veriÔ¨Åed if monolingual would outperform bilingual training: we compare GA in English + French with only English (last row of Table 1c). Bilingual training does not appear to hurt, and might in fact be helpful. We follow-up by inspecting whether the bilingual word vector space led to shared representations: common nouns have their English-French translation close-by, while proper nouns do not (French and US politicians cluster separately). Named Entity Recognition Transfer The goal of our NER experiment is to verify whether DeepType produces a type sensitive language representation useful for transfer to other downstream tasks. To measure this we pre-train a type classiÔ¨Åer with a character-CNN and word embeddings as inputs, following (Kim et al. 2015), and replace the output layer with a linear-chain CRF (Lample et al. 2016) to Ô¨Åne-tune to NER data. Our model‚Äôs F1 scores when transferring to the CoNLL 2003 NER task and OntoNotes 5.0 (CoNLL 2012) split are given in Table 1b. We compare with two baselines that share the architecture but are not pre-trained, along with the current state of the art (Chiu and Nichols 2015). We see positive transfer on Ontonotes and CoNLL: our baseline Bi-LSTM strongly outperforms (Chiu and Nichols 2015)‚Äôs baseline, while pre-training gives an additional 3-4 F1 points, with our best model outperforming the state of the art on the OntoNotes development split. While our baseline LSTM-CRF performs better than in the literature, our strongest baseline (CNN+LSTM+CRF) does not match the state of the art with a lexicon. We Ô¨Ånd that DeepType always improves over baselines and partially recovers lexicon performance gains, but does not fully replace lexicons. 5 Related Work Neural Network Reasoning with Symbolic structures Several approaches exist for incorporating symbolic structures into the reasoning process of a neural network by designing a loss function that is deÔ¨Åned with a label hierarchy. In particular the work of (Deng et al. 2012) trades off speciÔ¨Åcity for accuracy, by leveraging the hyper/hyponymy relation to make a model aware of different granularity levels. Our work differs from this approach in that we design our type system within an ontology to meet speciÔ¨Åc accuracy goals, while they make the accuracy/speciÔ¨Åcity tradeoff at training time, with a Ô¨Åxed structure. More recently (Wu, Tygert, and LeCun 2017) use a hierarchical loss to increase the penalty for distant branches of a label hierarchy using the ultrametric tree distance. We also aim to capture the most important aspects of the symbolic structure and shape our loss function accordingly, however our loss shaping is a result of discrete optimization and incorporates a learnability heuristic to choose aspects that can easily be acquired. A different direction for integrating structure stems from constraining model outputs, or enforcing a grammar. In the work of (Ling, Singh, and Weld 2015), the authors use NER and FIGER types to ensure that an EL model follows the constraints given by types. We also use a type systemand constrain our model‚Äôs output, however our type system is task-speciÔ¨Åc and designed by a machine with a disambiguation accuracy objective, and unlike the authors we Ô¨Ånd that types improve accuracy. The work of (Krishnamurthy, Dasigi, and Gardner 2017) uses a type-aware grammar to constrain the decoding of a neural semantic parser. Our work makes use of type constraints during decoding, however the grammar and types in their system require human engineering to Ô¨Åt each individual semantic parsing task, while our type systems are based on online encyclopaedias and ontologies, with applications beyond EL. Neural Entity Linking Current approaches to entity linking make extensive use of deep neural networks, distributed representations. In (Globerson et al. 2016) a neural network uses attention to focus on contextual entities to disambiguate. While our work does not make use of attention, RNNs allow context information to affect disambiguation decisions. In the work of (Yamada et al. 2016) and (Yamada et al. 2017), the authors adopt a distributed representation of context which either models words and entities, or documents and entities such that distances between vectors informs disambiguation. We also rely on word and document vectors produced by RNNs, however entities are not explicitly represented in our neural network, and we use context to predict entity types, thereby allowing us to incorporate new entities without retraining. 6 Conclusion In this work we introduce DeepType, a method for integrating symbolic knowledge into the reasoning process of a neural network. We‚Äôve proposed a mixed integer reformulation for jointly designing type systems and training a classiÔ¨Åer for a target task, and empirically validated that when this technique is applied to EL it is effective at integrating symbolic information in the neural network reasoning process. When pre-training with DeepType for NER, we observe improved performance over baselines and a new state of the art on the OntoNotes dev set, suggesting there is cross-domain transfer: symbolic information is incorporated in the neural network‚Äôs distributed representation. Furthermore we Ô¨Ånd that type systems designed by machines outperform those designed by humans on three benchmark datasets, which is attributable to incorporating learnability and target task performance goals within the design process. Our approach naturally enables multilingual training, and our experiments show that bilingual training improves over monolingual, and type systems optimized for English operate at similar accuracies in French, German, and Spanish, supporting the claim that the type system optimization leads to the discovery of high level cross-lingual concepts useful for knowledge representation. We compare different search techniques, and observe that stochastic optimization has comparable performance to heuristic search, but with orders of magnitude less objective function evaluations. The main contributions of this work are a joint formulation for designing and integrating symbolic information into neural networks, that enable us to constrain the out-puts to obey symbolic structure, and an approach to EL that uses type constraints. Our approach reduces EL resolution complexity from O(N2)toO(N), while allowing new entities to be incorporated without retraining, and we Ô¨Ånd on three standard datasets (WikiDisamb30, CoNLL (YAGO), TAC KBP 2010) that our approach outperforms all existing solutions by a wide margin, including approaches that rely on a human-designed type system (Ling, Singh, and Weld 2015) and the more recent work by Yamada et al. for embedding words and entities (Yamada et al. 2016), or document and entities (Yamada et al. 2017). As a result of our experiments, we observe that disambiguation accuracy using Oracles reaches 99.0% on CoNLL (YAGO) and 98.6% on TAC KBP 2010, suggesting that EL would be almost solved if we can close the gap between type classiÔ¨Åers and the Oracle. The results presented in this work suggest many directions for future research: we may test how DeepType can be applied to other problems where incorporating symbolic structure is beneÔ¨Åcial, whether making type system design more expressive by allowing hierarchies can help close the gap between model and Oracle accuracy, and seeing if additional gains can be obtained by relaxing the classiÔ¨Åer‚Äôs conditional independence assumption. Acknowledgments We would like to thank the anonymous reviewers for their valuable feedback. In addition, we thank John Miller, Andrew Gibiansky, and Szymon Sidor for thoughtful comments and fruitful discussion. Appendices A Training details and hyperparameters Optimization Our models are implemented in TensorÔ¨Çow and optimized with Adam with a learning rate of 10 4,1= 0:9;2= 0:999;= 10 8, annealed by 0.99 every 10,000 iterations. To reduce over-Ô¨Åtting and make our system more robust to spelling changes we apply Dropout to input embeddings and augment our data with noise: swap input words with a special <UNK> word, remove capitalization or a trailing ‚Äús.‚Äù In our NER experiments we add Gaussian noise during training to the LSTM weights with = 10 6. We use early stopping in our NER experiments when validation F1 score stops increasing. Type classiÔ¨Åcation model selection is different as the models did not overÔ¨Åt, thus we instead stop training when no more improvements in F1 are observed on held-out type-training data ( 3days on one Titan X Pascal). Architecture Character representation Our character-convolutions have character Ô¨Ålters with (width, channels): f(1;50);(2;75);(3;75);(4;100);(5;200);(6;200);(7;200)g; a maximum word length of 40, and 15-dimensional character embeddings followed by 2 highway layers. We learn 6-dimensional embeddings for 2 and 3 character preÔ¨Åxes and sufÔ¨Åxes.Table 2: Hyperparameters for type system discovery search. Method Parameter Value Greedy b 1 Beam Search b 8CEMMCEM 1000 pstart50 jRj0:00115 NCEM 200GAG 200 Npopulation 1000 mutation probability 0.5 crossover probability 0.2 Text Window ClassiÔ¨Åer The text window classiÔ¨Åers have 5-dimensional word embeddings, and use Dropout of 0.5. Empirically we Ô¨Ånd that two passes through the dataset with a batch size of 128 is sufÔ¨Åcient for the window classiÔ¨Åers to converge. Additionally we train multiple type axes in a single batch, reaching a training speed of 2.5 type axes/second. B Wikipedia Link SimpliÔ¨Åcation Link statistics collected on large corpuses of entity mentions are extensively used in entity linking. These statistics provide a noisy estimate of the conditional probability of an entityefor a mention mP(ejm). Intra-wiki links in Wikipedia provide a multilingual and broad coverage source of links, however annotators often create link anaphoras: ‚Äúking‚Äù ! Charles I of England . This behavior increases polysemy (‚Äúking‚Äù mention has 974 associated entities) and distorts link frequencies (‚Äúqueen‚Äù links to the band Queen 4920 times, Elizabeth II 1430 times, and monarch only 32 times). Problems with link sparsity or anaphora were previously identiÔ¨Åed, however present solutions rely on pruning rare links and thus lose track of the original statistics (Ferragina and Scaiella 2010; Hasibi, Balog, and Bratsberg 2016; Ling, Singh, and Weld 2015). We propose instead to detect anaphoras and recover the generic meaning through the Wikidata property graph: if a mention points to entities A and B, with A being more linked than B, and A is B‚Äôs parent in the Wikidata property graph, then replace B with A. We deÔ¨Åne A to be the parent of B if they connect through a sequence of Wikidata properties finstance of ,subclass of ,is a list ofg, or through a single edge in foccupation ,position held ,series16g. The simpliÔ¨Åcation process is repeated until no more updates occur. This transformation reduces the number of associated entities for each mention (‚Äúking‚Äù senses drop from 974 to 143) and ensures that the semantics 15The choice of pstart affects the system size at the Ô¨Årst step of the CEM search: setting it too low leads to poor search space exploration, while too high increase the cost of the objective function evaluation. Empirically we know that for a given the solution will have an expected size s. Settingpstart =s jRjleads to sufÔ¨Åcient exploration to reach the performance of larger pstart. 16e.g.Return of the Jedi ! seriesStar WarsTable 3: Link change statistics per iteration during English Wikipedia Anaphora SimpliÔ¨Åcation. Step Replacements Links changed 1 1,109,408 9,212,321 2 13922 1,027,009 3 1229 364,500 4 153 40,488 5 74 25,094 6 4 1,498 of multiple speciÔ¨Åc links are aggregated (number of ‚Äúqueen‚Äù links to monarch increase from 32 to 3553). 0 2000 4000 6000 8000 10000 12000 Polysemy100101102103104105106Count (log-scale)Original (Mean = 4.73) Simplified (Mean = 3.93) Figure 4: Mention Polysemy change after simpliÔ¨Åcation. After simpliÔ¨Åcation we Ô¨Ånd that the mean number of senses attached to polysemous mentions drops from 4.73 to 3.93, while over 10,670,910 links undergo changes in this process (Figure 4). Table 3 indicates that most changes result from mentions containing entities and their immediate parents. This simpliÔ¨Åcation method strongly reduces the number of entities tied to each Wikipedia mention in an automatic fashion across multiple languages. C Multilingual Training Representation Multilingual data creation is a side-effect of the ontologybased automatic labeling scheme. In Table 4 we present nearest-neighbor words for words in multiple languages. We note that common words (he, Argentinian, hypothesis) remain close to their foreign language counterpart, while proper nouns group with country/language-speciÔ¨Åc terms. We hypothesize that common words, by not fulÔ¨Ålling a role as a label, can therefore operate in a language independent way to inform the context of types, while proper nouns will have different type requirements based on their labels, and thus will not converge to the same representation. D Effect of System Size Penalty We measure the effect of varying on type system discovery when using CEM for our search. The effect averaged on 10 trials for a variety of penalties is shown in Figure 6. In particular we notice that there is a crossover point in the performance characteristics when selecting , where a looser penalty has diminishing returns in accuracy around = 10 4. 105 104 103 102 Penalty  0.9200.9250.9300.9350.9400.9450.9500.955Accuracy Figure 5: Effect of varying on CEM type system discovery E Learnability Heuristic behavior To better understand the behavior of the population of classiÔ¨Åers used to obtain AUC scores for the Learnability heuristic we investigate whether certain type axes are systematically easier or harder to predict, and summarize our results in Figure 7. We Ô¨Ånd that type axes with a instance of edge have on average higher AUC scores than type axes relying on wikipedia category . Furthermore, we also wanted to ensure that our methodology for estimating learnability was not Ô¨Çawed or if variance in our measurement was correlated with AUC for a type axis. We Ô¨Ånd that there is no obvious relation between the standard deviation of the AUC scores for a type axis and the AUC score itself. F Multilingual Part of Speech Tagging Finally the usage of multilingual data allows some amount of subjective experiments. For instance in Figure 8 we show some samples from the model trained jointly on english and french correctly detecting the meaning of the word ‚Äúcar‚Äù across three possible meanings. G Human Type System To assist humans with the design of the system, the rules are built interactively in a REPL, and execute over the 24 million entities in under 10 seconds, allowing for real time feedback in the form of statistics or error analysis over an evaluation corpus. On the evaluation corpus, disambiguation mistakes can be grouped according to the ground truth type, allowing a per type error analysis to easily detect areas where more granularity would help. Shown below are the 5 different type axes designed by humans. 