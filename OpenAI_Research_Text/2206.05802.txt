Self-critiquing models for assisting human evaluators William SaundersCatherine YehJeff Wu Steven Bills Long Ouyang Jonathan Ward Jan Leike OpenAI Abstract We ﬁne-tune large language models to write natural language critiques (natural language critical comments) using behavioral cloning. On a topic-based summarization task, critiques written by our models help humans ﬁnd ﬂaws in summaries that they would have otherwise missed. Our models help ﬁnd naturally occurring ﬂaws in both model and human written summaries, and intentional ﬂaws in summaries written by humans to be deliberately misleading. We study scaling properties of critiquing with both topic-based summarization and synthetic tasks. Larger models write more helpful critiques, and on most tasks, are better at self-critiquing, despite having harder-to-critique outputs. Larger models can also integrate their own selfcritiques as feedback, reﬁning their own summaries into better ones. Finally, we motivate and introduce a framework for comparing critiquing ability to generation and discrimination ability. Our measurements suggest that even large models may still have relevant knowledge they cannot or do not articulate as critiques. These results are a proof of concept for using AI-assisted human feedback to scale the supervision of machine learning systems to tasks that are difﬁcult for humans to evaluate directly. We release our training datasets, as well as samples from our critique assistance experiments. 1 Introduction 1.1 Motivation With increasingly capable language models, it is important to ensure models are trustworthy on difﬁcult and high stakes tasks. For example, models are being used to write complex pieces of code [CTJ+21,LCC+22] and answer open-ended questions about the world [ NHB+21,MTM+22]. We would like to be able to train models that don’t write buggy code or spread misinformation. However, fully evaluating correctness of code or veracity of facts about the world requires a lot of effort and expertise. Techniques to train systems from human feedback [ NR+00,Wes16 ,CLB+17, JMD20 ,NMS+21,SCC+22], fundamentally depend on humans’ ability to demonstrate and evaluate the quality of model outputs. This leads to the problem of scalable oversight [ AOS+16]: How can we effectively provide feedback to models on tasks that are difﬁcult for humans to evaluate? One idea to overcome this problem is to use AI systems to aid human evaluation. This basic idea comes up in many prior proposals, such as iterated ampliﬁcation [ CSA18 ], debate [ ICA18 ], and recursive reward modeling [ LKE+18]. If we ﬁrst train a model to perform simpler assistive tasks that humans can evaluate, then we can use this model to assist humans with the evaluation of harder tasks. A key assumption is that evaluating the assistance task is simpler than evaluating the "base" Equal contribution. Correspondence to jeffwu@openai.comarXiv:2206.05802v2  [cs.CL]  14 Jun 2022Figure 1: Assistance from our models reliably causes labelers to ﬁnd more critiques, on answers generated from all three distributions (x-axis). Most of the critiques found in the assistance condition came directly from using model critiques. The number of used model critiques is comparable to the number of critiques found in the “no assist” condition. Note: Throughout the paper, all error bars shown either use bootstrapping at the passage level or simply calculate standard error of the mean (when appropriate), and represent z= 1(i.e. one standard deviation on each side). All results use data from test set passages which were held out from training. task. For example, verifying a bug in code is easier than ﬁnding bugs. This idea can also be justiﬁed by making an analogy between scalable oversight and complexity theory (Appendix B). In this work we explore a simple form of assistance: natural language critiques of model outputs. Critiques are a particularly natural form of assistance from the point of view of preventing misleading outputs. If a human evaluator doesn’t carefully check a model’s outputs, the model might learn to give solutions that look good to the evaluator but are systematically ﬂawed in a way that exploits human biases. We hope an equally smart critique model can help humans to notice these ﬂaws. If models can generate outputs they “know” have ﬂaws, but cannot explain these ﬂaws to human evaluators, then they won’t be effective assistants. This further motivates us to improve a model’s ability to critique relative to its ability to discriminate answer quality. 1.2 Contributions We ﬁne-tune large language models [ BMR+20,CND+22,HBM+22] jointly on both a base task and its corresponding critique task. For the base task, we focus primarily on a topic-based summarization task of summarizing some particular aspect of a given passage. The critique task is to ﬁnd errors in topic-based summaries, given a passage and topic. We additionally study some synthetic tasks. Our key contributions are: (1) Model-written critiques help humans ﬁnd ﬂaws they would have missed (Figure 1, Section 3.4). Human labelers asked to ﬁnd critiques of (model or human-written) answers ﬁnd about 50% more critiques when given assistance from a critique model. Furthermore, with answers written to be deliberately misleading, assisted labelers ﬁnd the intended critiques 50% more often. (2) Critique helpfulness scales favorably with model capabilities (Figure 4, Section 4.2). Larger models are generally better at critiquing themselves, despite having harder-to-critique answers. That is, their ability to critique keeps up with their ability to give more convincing answers. We generally observe similar but less consistent trends on synthetic tasks (Figure 5). (3) Large models can use critiques to help reﬁne their own answers (Figure 6, Section 4.3). Model-generated critiques help models directly improve their own answers. Using rejection sampling to ﬁnd good critiques makes this improvement larger than a baseline of reﬁning directly without a critique. For both kinds of reﬁnement, improvement scales favorably with model size, with small models showing no improvement. 2Task type Inputs !Output Description Base Q!A Given a question, output an answer to it Critiqueability Q; A! fYes;Nog Given a question, and an answer to it, output whether the answer contains ﬂaws Critique Q; A!C Given a question, and an answer to it, output a natural language critique of the answer Helpfulness Q; A; C ! fYes;NogGiven a question, an answer to it, and a critique of the answer, output whether the critique is valid and helpful Conditional reﬁnement Q; A; C !A Given a question, an answer to it, and a critique of the answer, output a new answer that addresses the critique Direct reﬁnement Q; A!A Given a question and an answer to it, output a new answer that improves the answer Table 1: The primary set of tasks our models are jointly trained on. Q,A, andCrepresent the space of questions, answers, and critiques, respectively. In our case, they are all texts of limited token lengths. We also train on a small amount of data for exploratory auxiliary tasks, such as corroborating answers and retrieving supporting quotes of various kinds. (4) We motivate and measure generator-discriminator-critique gaps (Section 5). We propose a new methodology to compare a model’s ability to generate answers, discriminate answer quality, and critique answers. Using the methodology, we study the scaling trends on topic-based summarization and in synthetic domains. In our experiments we failed to ﬁnd a clear trend showing critique performance catching up to discriminator performance, implying that larger models still have relevant knowledge they don’t articulate as critiques. Future effort should be directed at studying and improving on critique performance relative to discrimination performance. (5) We release our training datasets and samples from our assistance experiments. We release a dataset with tens of thousands of human-written critiques, reﬁnements, critique evaluations, and more, used to train our topic-based summarization models. We also release a dataset from our assistance experiments, including a dataset of misleading answers and intended ﬂaws. 2 Dataset collection and model training At a high level, we start with collecting demonstrations of some “base task,” and use supervised ﬁne-tuning (SFT) to train models to do that task. We then collect demonstrations of critiques of the model’s answers, and ﬁne-tune a new model to jointly do the base task and critique task. We proceed to iterate, with many rounds of data collection for a variety of tasks, and with the models training jointly on all tasks. 2.1 Structure of tasks First, we assume there is some arbitrary base task . We assume no structure to the task, except that there should be some input, which we call the question , and output, the answer . The critique task then asks for a ﬂaw in the answer to be pointed out, given the question and answer pair. We then deﬁne corresponding binary discrimination tasks, which judge the outputs to the base task (answers) and critique task (critiques). The answer discrimination task—whether the answer contains any ﬂaws—is called critiqueability . We hope that whenever an answer is critiqueable, we would be able to generate a concrete critique. The critique discrimination task—whether a critique points out a legitimate shortcoming of the answer—is called helpfulness . Finally, we deﬁne a reﬁnement task, in which we ask for a new answer, in light of some critique of an answer. We call this conditional reﬁnement , to distinguish it from the variant of direct reﬁnement — giving a better answer given an existing answer without conditioning on a critique. Of course, we can also ask for critiqueability of reﬁnement outputs. For a summary of these tasks, see Table 1. For an example, see Table 2. 3Question : Our King has always been a little different. He’s very quiet I haven’t really seen him give anyone orders at all either. Whenever something needs to be done I see him doing it. [ : : :] That’s when I believed everything he told me while he took me adventuring with him. Now I know that there is a better life to be had out of this one. A less edged and more rounded one. Thank you king Steve. Minecraft Steve. Summarize the story’s setting. Answer : The story is set in a medieval kingdom, where the king is the main character of the story. The king is described as a good and active king. The narrator is a child who has always wondered why the king is so different from everyone else. Critiqueable : Yes Critique : The answer should mention that the setting is a video game. Helpful : Yes Conditional reﬁnement : The story is set in a medieval kingdom in the video game Minecraft. The king is the main character of the story. The king is described as a good and active king. The narrator is a child who has always wondered why the king is so different from everyone else. Table 2: Representative example of a topic-based summarization task, and its associated tasks. See Appendix A.5 for details on how we format our tasks (different than shown). 2.2 Topic-based summarization We report most of our main results on the base task of topic-based summarization [ Dan05 ,ZYY+21], a task similar to or interchangeable with query-based summarization and question-focused summarization. In topic-based summarization, the summary focuses on a speciﬁc aspect of a text rather than trying to summarize the whole text. See Table 2 for an example. We collected our own dataset of over 6,000 distinct topical queries and summaries, on over 2,000 distinct passages. Our distribution of passages is sampled from a dataset of short stories, Wikipedia articles, or web articles (mostly news) scraped from the internet. Most tasks were generated based on short texts with less than 2,048 tokens when encoded with the GPT-2 tokenizer [ RWC+19]. We also gathered some tasks based on texts with up to 4,096 tokens which were not used for training. Our labelers generated between 1 and 8 topic-based summarization questions per passage, typically also including a topic not covered by the passage (for which the answer is empty). Summaries are up to a paragraph long – we targeted between 2-10 sentences unless the topic was missing. We aimed for these topics to be non-trivial to summarize in various ways. See Appendix A for details. 2.2.1 Data collection We collect demonstrations on all the tasks mentioned in Section 2.1. Given a task for which we want to collect a demonstration, we can choose whether each input is generated from a model or human. We always use a human-generated question. All tasks but the base task require an answer as input, many for which we typically use outputs from our best model. For example, critique demonstrations are on model-generated answers, and helpfulness judgements are on model-generated critiques. For reﬁnements the situation is more complex, and detailed in Appendix A.2. Since we need model outputs for most demonstrations, we collect data in rounds. After each round, we train a model jointly on all task demonstrations collected thus far. We start with base task demonstration collection. Then with a model trained on only the base task, we collect demonstrations for critiqueability, critique, and reﬁnement tasks using model-generated answers. Finally, we collect demonstrations for helpfulness tasks, by showing labelers model-generated critiques of modelgenerated answers. For more details on our data collection, see Appendix A and Table 4. We publicly release all data used to train ﬁnal models2. 2We release six ﬁles, located at https://openaipublic.blob.core.windows.net/critiques/dataset/: base/train.jsonl.gz, base/test.jsonl.gz, critiques/train.jsonl.gz, critiques/test.jsonl.gz, helpfulness/train.jsonl.gz, helpfulness/test.jsonl.gz 42.2.2 Models Similarly to [ DL15 ,RNSS18 ,BHA+21], we start with foundation models pre-trained to autoregressively predict the next token in a large text corpus. All of our models are transformer decoders [VSP+17] in the style of GPT-3 [RNSS18, BMR+20]. We ﬁne-tune pre-trained models using supervised learning to predict human labels on all of these tasks. Joint training means that there is no capability asymmetry between the base and critique models—thus we expect that any mistakes the base model “knows about” would also be “known” by the critique model. We combine critiqueability tasks with answer “Yes” and critique tasks into a single training example (see Appendix A.5). Otherwise we have each example corresponding to a task, and shufﬂe all the examples for training. Note that our examples are not i.i.d. for multiple reasons: we have multiple questions per passage, the reﬁnement demonstrations are collected at the same time as critique demonstrations, etc. See Appendix A for details. Our models are trained for one epoch and we tune only the learning rate, with remaining hyperparameters ﬁxed to be similar to pre-training. We mask out all tokens except those corresponding to the human demonstrations. For example, in the critique task, we mask out the passage, topic, and answer being critiqued. See Appendix A.5 for details on input format. Critiqueability and helpfulness score Recall that for discrimination tasks, we collect binary yes/no labels. Rather than sampling binary labels from our models, we can look directly at logits to recover a probability. Thus we often use the terms critiqueability score and helpfulness score to refer to the quantityPr[Yes] Pr[Yes]+Pr[No]on the corresponding input. On the critique task we “force” the model to give a critique even if the answer is perfect. Separately, the critiqueability score can be used to determine whether to ask it to critique in the ﬁrst place, and the helpfulness score can be used to determine whether the critique is good after the fact. Model scale We use ﬁve pre-trained models with varying capabilities. Our pre-trained models are unfortunately not directly comparable to one another (for example, due to different pre-training datasets). However, on models which are directly comparable, the number of parameters correlates strongly with supervised ﬁne-tuning validation loss. Using loss as the natural way to compare models of different architecture is suggested by [ CCG+22], though here we use loss measured on ﬁne-tuning instead of pre-training since it is the dataset commonality. Thus throughout the paper, we use “model scale” to refer to loss, measured in nats per token, and use that instead of model size for scaling laws [KMH+20]. 2.3 Synthetic tasks We also report results on four “synthetic” tasks, described in Table 3. For these tasks, we don’t require human data collection because we have binary ground truth for both answer and critique validity. We use hand-coded oracles for each of the base, critiqueability, critique, and helpfulness tasks. Our tasks are chosen based on two criteria: 1. Evaluating critiques is easier than evaluating the base tasks. 2.The task is difﬁcult but possible for most models. We tweak free parameters (e.g. sentence length for the unscramble task or number of digits for addition) to achieve this. For our synthetic task models, we trained two rounds of models: 1. First we train on 100,000 generated base tasks with oracle demonstrations. 2.We then add 100,000 critiqueability task demonstrations, sub-sampled such that exactly half have incorrect answers, and 50,000 critique task demonstrations on that half. Answers are sampled from the ﬁrst model at temperature 0, which we ﬁnd improves accuracy. (We 5Base task description Critique task description Addition Add two 6-digit numbers A digit in the answer whose value is wrong, as well as the correct value for that digit (digits are indexed from least signiﬁcant to most signiﬁcant) Question: 505579 + 900050 Answer: 1505629 Critique: Digit at index 6 should be 4 3-SAT Given a satisﬁable boolean formula in CNF form, output a satisfying assignmentA clause that is not satisﬁed Question: Provide boolean values for a; b; c; d; e; f; g; h; i that satisfy the following formula: (:i_ :f_e)^(:e_ :g_c)^(g_ :f_d)^(:g_f_a)^: : : Answer: a=false ; b=true; c=false ; d=true; e=false ; f=false ; g=true; h=false ; i= true Critique: The following clause is not satisfied: (:g_f_a) Alphabetize Given a list of 18 words, sort them in alphabetical orderEither a missing/extra word in the resulting list, or a pair of adjacent words in the wrong order Question: Alphabetize the following words: growing prompts determining recreation evolve payable ruled patrols estimate emergency fate shrimp urges intoxicated narrator revert players pharmaceutical Answer: determining emergency evolve estimate fate growing intoxicated narrator patrols pharmaceutical payable players prompts recreation revert ruled shrimp urges Critique: Words misordered: evolve comes alphabetically after estimate RACE Provide the answers to two multiple choice questions about the same text passage. Questions are drawn from the RACE dataset [LXL+17].Specify a question with a wrong answer, and give the correct answer Question: [passage] Q1. Which one is the best title of this passage? A. Developing your talents. B. To face the fears about the future. C. Suggestions of being your own life coach. D. How to communicate with others. Q2. How many tips does the writer give us? A. Two. B. Four. C. One. D. Three. Answer: 1 = C, 2 = D Critique: Answer to question 2 should be A Table 3: Synthetic tasks with examples occasionally repeat tasks when accuracy is so low or high that sub-sampling cannot guarantee uniqueness.) This setup differs from the setup of topic-based summarization in two ways: (1) Each different model size is ﬁne-tuned on a qualitatively different dataset in the second round. For topic-based summarization, different models are all trained on the same dataset. (2) We don’t do a third round of training on helpfulness tasks, although we do use the helpfulness oracle for evaluations. 3 Assisting critique ﬁnding We ran experiments where our models assist human labelers at writing a set of critiques for answers. The assistance itself is a set of critiques shown to the labeler. 3.1 Motivation We chose this task because: • Finding critiques is an important subtask of evaluating answer quality in general. •We thought it would be the easiest task to use to measure the effect of model assistance. We initially tried a comparison-based task but it was more difﬁcult to work with (see Appendix E). • Suggesting critiques is a particularly natural form of assistance for critique-ﬁnding. 6Figure 2: Even though the largest contribution from our models is ﬁnding more minor errors, model assistance also helps uncover some major and critical errors (left). The majority of model-written critiques point out lack of summary coverage, but there is also increase in found inaccuracies (right). Importantly, our models do not have to always produce valid critiques to be helpful to human labelers, though too many invalid critiques would waste the labelers’ time. 3.2 Setup Labelers are given a topic-based summarization question and summary, and instructed to write as many different possible critiques as they can think of for the summary. They are also instructed to only read as much of the text as necessary to write the critiques. In the baseline no assist condition, the labeler had no assistance and had to write all critiques themselves. In the assist condition, the labeler would also see 8 model-generated critiques of the answer, one at each of the following temperatures: [0.0, 0.1, 0.2, 0.3, 0.4, 0.5, 0.6, 1.0]. Critiques were de-duplicated, sorted according to the model’s helpfulness score, and shown to the human labeler along with their helpfulness scores. The labeler could click a button to "use" any of the model generated critiques. If they did this, it would pre-ﬁll the labeler critique with the model-written text, which they could further edit. We use our best model for generating all assistance. We use questions for longer passages (2048 to 3840 tokens in length) in order to observe a larger effect from assistance. We noticed no degradation in critique writing ability despite training only on passages up to length 2048. For each question, we use three different kinds of answers to critique: •Model : An answer sampled from our best model, the same as the critiquing model, using a randomly chosen temperature.3 •Human : An answer generated by a labeler doing the base task honestly. •Human misleading : An answer generated by the same labeler to deliberately have a hard-to-detect ﬂaw. (Details in Appendix A). This results in six total conditions. For each summary, we had six labelers ﬁnding critiques, assigning one to each of the six conditions. We ensured labelers had not seen the text before (if they had, it would get reassigned). We did not limit the amount of time the labeler took performing the task: we instructed them to take enough time to cover all possible critiques of the answer at least 90% of the time. We also ask the labeler to provide a 1-7 Likert rating for quality of the answer, with 7 indicating a perfect answer. For each critique the labeler ﬁnds, we ask for a severity level, ranging from minor to critical, and a category (described in Appendix A). 3Throughout the paper, “randomly chosen temperature” means a temperature drawn uniformly at random from the set f0;0:1; : : : ; 0:9;1g: 73.3 Findings We ﬁnd that critiques written by our model signiﬁcantly help labelers ﬁnd critiques: 1.Assistance helps labelers ﬁnd more critiques under all answer conditions (Figure 1). In the assistance conditions, most labeler-written critiques “used” a model-critique and the number of used critiques is comparable to the number of critiques found without assistance. Only 15.3% of the used critiques were edited further. 2.Assistance does not appreciably affect the time taken by labelers (Figure 15). The primary effect is that labelers take a bit longer because they write more critiques when given assistance. 3.The number of critiques increases for all severity levels and critique categories (Figure 2) . Though the biggest increases comes from minor critiques, we also ﬁnd increases in major and critical critiques. Similarly, we see the biggest increase in coverage critiques, but also a modest increase in accuracy critiques. 4.With assistance answers are more frequently critiqued and are given lower ratings (Figure 16) . This suggests that the increase in critiques translates to a different subjective sense of quality. For example, on model answers, unassisted labelers found critiques on just 54% of inputs and gave an average rating of 5.6, while assisted labelers found critiques on 78% of inputs and gave an average rating of 4.9. Note that our critique model was trained on data from the same pool of labelers—we are essentially leveraging our models to bootstrap our labelers to be more careful at the base task. 3.3.1 Checking for intended critiques One potential confounder for our results is that because labelers are shown many critiques, they are occasionally erring and accepting critiques that are not truly valid. In other words, we have no way to distinguish between a valid critique of a poor answer from a misleading critique of a valid answer. To break this symmetry, we had the authors of the misleading answers also generate the corresponding “intended” critiques (usually just one per answer). We then ask them to check whether the other labelers in the assistance experiment found critiques covering the intended critiques. We also ask them to independently judge whether each of the new critiques was valid (we assume the intended critiques are valid). We ﬁnd that: 1.With assistance, labelers ﬁnd the intended critiques 455%of the time, whereas without assistance they only ﬁnd it 275%of the time. 2.The fraction of critiques the author considers valid does not appreciably decrease with assistance ( 71% with assistance versus 73% without). 3. However, the number of valid critiques is still much higher, 0:960:09vs.0:620:07. 4.With assistance, labelers also ﬁnd more valid and novel critiques, 0:240:06vs.0:180:05. 3.4 Dataset release We release a comprehensive dataset of results4. This includes the assistance provided, critiques used and written, ratings given, and the intended critiques. Random samples from this dataset can be found in Appendix F.2. 4 Critique quality results In this section, we present a number of other results on critique quality. We ﬁnd that critique quality is enabled by scale: 4https://openaipublic.blob.core.windows.net/critiques/assistance.jsonl.gz 8Figure 3: Our model gives more helpful critiques than InstructGPT baselines, but still signiﬁcantly less helpful critiques than humans. 1.Larger models’ critiques are rated as more helpful by humans. This holds even if making the answer distribution correspondingly difﬁcult to critique by asking them to self-critique. 2.Larger models are able to improve outputs using critique-conditional reﬁnements. We verify the critique is helping by comparing to a direct reﬁnement baseline. 4.1 Helpfulness The simplest way to measure critique quality is by looking at helpfulness as judged by human labelers. To check that our supervised ﬁne-tuned model is not overly nit-picky, we also asked labelers to mark whether each critique was clearly and unambiguously helpful. We compare our best critique model to human-written critiques, and to baseline models. For baselines, we use a model trained in the style of InstructGPT [ OWJ+22] from the same pretrained model. We use this model both using a zero-shot instruction-based context, and with few-shot contexts in the style of [ RWC+19,BMR+20]. For this evaluation, answers were generated randomly from either one of our large ﬁne-tuned models, or an InstructGPT baseline model with zero-shot or few-shot prompting. We then evaluated on answers for which humans found critiques (“critiqueable answers”). Overall we ﬁnd our model’s critiques to be helpful more often than the baselines, but still substantially less helpful than human critiques (Figure 3). We found the InstructGPT models to give surprisingly helpful critiques, considering that they were not trained on our task at all. 4.2 Self-critiquing helpfulness and scaling In Section 3.4, we showed that models are able to help humans ﬁnd critiques on the distribution of answers coming from the same model. One natural question to ask is: Should a model be able to reliably ﬁnd ﬂaws in its own outputs? After all, if it understands these ﬂaws, it could have perhaps avoided them in the ﬁrst place. However, there is at least one major reason you still might expect a model to identify its own mistakes: Recognizing errors is easier than avoiding them. Equivalently, verifying solutions is easier than ﬁnding them (compare to PNPfrom computational complexity theory). It’s possible that our model can identify and critique all of its mistakes. This motivates us to look at the percentage of the time poor outputs have helpful critiques. The higher this percentage, the easier it will be to assist humans in evaluation of the base task. 9(a) More capable models have critiqueable outputs around 20% less often than the smallest models, according to labelers. Less than 15% of outputs are uncritiqueable for the worst models, and over 30% for the best models. (b) Helpfulness of self-critiques, as judged by human labelers, both with and without ﬁltering by when labelers found a critique themselves. (c) Larger models are not only better at critiquing, but harder to critique – even ﬁltering for only cases where labelers found a critique. The diagonal (spanning lower left to upper right) corresponds to the “critiqueable answers” line in 4b. Figure 4: More capable models are signiﬁcantly better at self-critiquing (Figure 4b). Although more capable models get better at generating hard-to-critique answers (Figure 4c), their ability to critique their answers is improving more rapidly with scale. This is true even without adjusting for the fact that humans ﬁnd fewer critiques of more capable models (Figure 4a). In all ﬁgures, we sample at the same random temperature for both the base task and critique task; the effects are equally visible at all temperature ranges (not pictured). 10Figure 5: Helpfulness of self-critiques for synthetic tasks, according to a critique validity oracle. Like Figure 4, we show with and without ﬁltering for critiqueable answers (according to a critiqueability oracle). On topic-based summarization, we ﬁnd that larger models are better at critiquing themselves (Figure 4b), even without ﬁltering for critiqueable answers. This holds even though answers from larger models are harder to critique (Figure 4a, 4c). One caveat is that our supervised dataset contains more critiques of outputs from larger models, since we typically use relatively capable answer models. However, we believe this effect to be minimal. On synthetic tasks, we generally observe similar trends in the critiqueable case (Figure 5), though the story is less clear. Overall, we have no strong reason to believe positive critique scaling to be a fundamental trend. We also do not know, for example, whether the trend would also go away if we use reinforcement learning to train both the answer and critique model. Nevertheless, we believe models have only recently reached a scale where critiquing on realistic tasks is possible. 4.3 Reﬁnements Another check of whether model-generated critiques are useful is to compare critique-conditional reﬁnements to direct reﬁnements. In other words, we compare reﬁnements generated using only an answer to reﬁnements generated using both an answer and a critique of that answer. In order to improve conditional reﬁnement performance, we can improve the critique. To do that, we do best-of-N [ SOW+20] against the helpfulness score; we sample N critiques, choose the best according to the model’s helpfulness score, and use that critique for the conditional reﬁnement. For direct reﬁnements, we take best-of-N reﬁnements using our model’s critiqueability score. In our reﬁnement experiments we ask for a reﬁnement regardless of whether the initial answer is critiqueable. If the initial answer were perfect, the model would have no chance at improving it. Thus in order to not “force” the model to reﬁne, we compare the reﬁnement to the original using the model’s critiqueability score. We also include baselines of the original “best-of-1” sample, and a best-of-8 sample (generating new answers from scratch, and ranking them by critiqueability). These experiments use temperature 0.5 to sample, which we believe to be near optimal for best-of-1 on all tasks (answering, critiquing, and reﬁnements). 114.3.1 Findings Our results are depicted in Figures 6 and 7 and samples can be found in Appendix F.3. Despite being somewhat noisy, these results suggest: 1.Good critiques help reﬁnement. Good critiques are useful for reﬁnement. Conditional reﬁnement appear to outperform direct reﬁnements, but only with critiques selected via best-of-N against helpfulness. Larger N helps improve the conditional reﬁnements. 2.Large model scale enables reﬁnements. Both forms of reﬁnement signiﬁcantly outperform the original output for larger models, but have little to no effect for smaller models. 3.Using critiques may not be competitive if controlling for compute. Rejection sampling to select better critiques to use for reﬁnements is competitive with rejection sampling on answers, a roughly compute-equalized baseline.5However, rejection sampling on direct reﬁnements appears to be a stronger baseline. 5 Generator-discriminator-critique (GDC) gaps In this section, we present results suggesting that models are not articulating all the problems they “know about.” Furthermore, despite the positive results in critique scaling from Section 4.2, we do not see evidence that the gap between our models’ discrimination and critique writing abilities is closing with scale. 5.1 Setup In this section we consider the following three tasks: • G: answer generation • D: answer discrimination (critiqueability) • C: answer critiquing In our main results from Section 4.2, we compared tasks GandC: To what extent can a model critique its own answers when they are poor? Comparing GandDis also interesting: Can a model tell when its own outputs are good or poor? As with critique scaling, we have two competing trends: The discriminators are getting better in an absolute sense, but the critiqueable answers may also be getting harder or subtler to critique. Finally, we argue that the gap between DandCis especially interesting: if a model can tell an answer is poor, can it also point out the ﬂaw to a human? If we could train models to always point out when they notice ﬂaws, this could go a long way towards having trustworthy and aligned models. For more discussion, see Appendix C. This motivates us to measure these quantities in such a way that: •The different tasks can be compared on the same axis. For each pair, we will aim to measure a "XY gap" measuring the amount Y performance exceeds X performance •TheGCgap corresponds to effectiveness of self-critiquing. A positive gap corresponds to ability to improve or check outputs by showing humans critiques. •TheGDgap corresponds to the model’s ability to know when answers it produces are poor. A positive gap corresponds to ability to improve outputs using a discriminator. •TheCDgap corresponds to the model’s ability to give human-understandable critiques on answers it “knows” are ﬂawed (and inability to give convincing critiques on sound answers). Our hope is to ultimately use critiques for better training signal on difﬁcult tasks. In a sense, we would like to take measurements that let us scope out how well this works without actually training our models on this task (see Appendix C.3.3). 5This is mildly surprising since rejection sampling on answers gives "fresh starts" while reﬁnements are sometimes forced to start with a poor answer. We speculate that with enough compute budget, it is optimal to use a combination of the two, as well as iterative reﬁnement. 12(a) Comparison of critique-conditional reﬁnements to three baselines: the original sample, a direct reﬁnement, and a best-of-8. Small models are poor at reﬁning. For large models, critique-conditional reﬁnements outperform baselines. (b) Using “forced” reﬁnements, we see that small models are exceptionally bad at conditional reﬁnements. In this setting, the model has no ability to opt out of critiquing or direct-reﬁning. Figure 6: Critiques help with reﬁning answers. They are also competitive with direct reﬁnements, and a best-of-8 baseline. However, these are only true at scale. Win rate is measured relative to the original (best-of-1) answer from the same model. All critiques and reﬁnements are generated from the same model as the answer, and all generations are at T=0.5. (a) Win rate of critique-conditional reﬁnement against the original answer. Better critiques (found via bestof-N against the helpfulness model with increasing N) seem to improve reﬁnements, though results are noisy. (b) Best-of-8 with direct reﬁnements offers a more competitive baseline that possibly outperforms critique reﬁnements. All 8 reﬁnements are of the same original answer. Figure 7: Critique reﬁnement and direct reﬁnement scaling with rejection sampling. Figure 7a assesses conditional reﬁnements optimizing the critique against helpfulness score, whereas Figure 7b assesses direct reﬁnements optimizing the reﬁnement against critiqueability score. Win rate is measured relative to the original (best-of-1) answer from the same model. All critiques and reﬁnements are generated from the same model as the answer, and all generations are at T=0.5. 13Figure 8: GDC gaps for topic-based summarization, using humans as ground truth. We measure sample quality using various metrics. "Diff" metrics subtract out the values for the generator. Note that best-of-2 against human win rate against best-of-1 would be exactly 75% if not for labelers marking ties. Overall, GDandGCgaps may be slightly increasing, but CDgap is positive and shows no trend. In this section, we present one such way of measuring and our results using it. 5.2 Measuring gaps We propose comparing these tasks to each other using the following methodology: • G: What is the average performance of a generator sample? • D: What is the performance of the generator with best-of-N against the discriminator? •C: What is the performance of the generator with best-of-N against the severity of a critique? For measuring C, we essentially use critiques as a discriminator: to judge an answer we generate a critique and consider the answer poor if any critique is valid and severe, according to a human. 14Figure 9: GDC gaps for synthetic tasks, using an oracle as ground truth. We also show the oracle best-of-2 discriminator. Note that for binary tasks, win rate is a linear transformation of accuracy gaps. We do not see consistent trends with CD gaps. 15Our deﬁnition for C is not necessarily canonical, but was chosen to be convenient to measure (see Appendix C.3.2). With this deﬁnition, it is clear that we should generally expect a non-negative GDgap and GCgap. If not, then optimizing against the discriminator or critique training signal makes the generator actively worse. What to expect for the CD gap is less clear. For more discussion, see Appendix C.3. On a practical level, using best-of-N to measure discrimination ability has many beneﬁts: •Unlike accuracy, we don’t need to calibrate to the distribution. Our critiqueability models are all trained on the same dataset, but answer models have very different critiqueability (Figure 4a). •We are most interested in the ability to discriminate between answers to the same question, rather than between answers to different questions, which is conﬂated by the discriminator’s ability to tell whether a question is difﬁcult. Though our work uses discriminators, this also means the deﬁnitions generalize naturally to using a preference based reward model for D. For our primary results, we use N= 2. This still leaves us with choices for how to measure performance of a sample, and how to measure critique quality. 5.2.1 Sample quality We explore a number of ways to measure sample quality: •Likert : We ask labelers to rate answers qualitatively on a 1-7 Likert scale. •Uncritiqueability (binary label) : We ask for the fraction of "perfect" outputs according to humans. For synthetic tasks, we use the oracle, so uncritiqueability is the same as accuracy. •Win rate : We ask labelers for comparisons of the sample in question to a sample from some ﬁxed distribution. In particular, if we use win rate against the generator (we can vary the distribution across model sizes), this makes measurements somewhat natural to compare across model sizes. This makes it so that Gis always 0.5, and DandCare always at most 1 1 2N. In the case where the outcome is binary, win rate is simply a linear transformation from accuracy: (1 + ACC accG)=2. A large caveat is that for topic-based summarization, these methods are all potentially ﬂawed, as suggested by our results in Section 3.4. This is especially problematic if labelers fail to ﬁnd critiques in systematic ways (rather than, e.g. independently failing to ﬁnd critiques with some probability). 5.2.2 Critique severity For critique severity measurement, the most straightforward thing is to use human-evaluated severity, with unhelpful critiques being least severe. For topic-based summarization, we again use humans for ground truth, and additionally break ties between helpful critiques using severity. For synthetic tasks, we again use binary helpfulness ground truth as if it were acting as the human being assisted. This simulates a human judgement in a setting where the humans can easily evaluate critiques, but not the base task answers. A downside of this approach is that it makes it possible for the model to ﬁnd ﬂaws by “trying out” critiques it has low conﬁdence in. This means that Ceffectively gets to leverage a bit of search against ground truth, which Ddoes not get to do. Therefore one could expect a negative CDgap. However this “search effect” should be quite small in the limit of scale with larger models – humans are doing a relatively simple task of critique validation, compared to the difﬁcult task of ﬁnding a critique. If the effect exists, it is a genuine advantage of having a human in the loop. For more discussion, see Appendix C.3.1. 5.3 Results We report our main topic-based summarization gap results in Figure 8 and our synthetic task gap results in Figure 9. For topic-based summarization, we use a random non-zero temperature for the 16answer, and use the same temperature for critiques. For synthetic tasks, we use temperature 1 for the answer, and temperature 0 for critiques6. We ﬁnd that: 1.We consistently observe positive GDandGCgaps, as expected, except when models are completely unable to do the task. 2. We observe a positive CD gap for topic-based summarization and 3-SAT and negative gap for Addition and RACE. 3. For topic-based summarization, the CD gap is approximately constant across model scale. 4.For most synthetic tasks, CDgap may be decreasing with model size, but the opposite is true for RACE, where critiquing is close to oracle performance (and is easy relative to knowing when to critique). Overall, this suggests that gaps are task-speciﬁc, and it is not apparent whether we can close the CD gap in general. We believe the CDgap will generally be harder to close for difﬁcult and realistic tasks. For example, on topic-based summarization the discriminator may be able to identify the labeler who gave the answer based on their writing style, and guess that some labelers give more critiqueable answers, without knowing the critiques. This does not happen with synthetic tasks. We believe much more work on gaps is possible, and present a few more variants and results in Appendix C.3. Overall, we are excited for future study of gaps as a way to measure headroom for pushing critique performance, and as a way to improve methods for scalable oversight. 6 Related work Scalable alignment experiments. [CSA18 ] implement iterative ampliﬁcation for algorithmic tasks. [ICA18 ] introduce debate and implement a toy version with sparse MNIST classiﬁcation. [ SRE+20, BCOI20 ,BCS+20,PTP+22] conduct debate-like experiments on realistic tasks (checking claims about movie reviews, physics problems, and reading comprehension), with humans serving as debaters, generally with mixed results. Conversely, [ AZWG21 ] study variants of debate with learned models serving as judges on toy tasks. [ WOZ+21] implements a variant of recursive reward modeling [LKE+18] on summarization tasks. Human assistance with natural language. [LSSC22 ] use assistance to help humans create demonstrations to create challenging NLI datasets. [ ZNC+22] and [ PHS+22] use model assistance to ﬁnd adversarial examples for language model classiﬁcations and generations, respectively. [ PKF+19] help humans perform passage-based question-answering, without reading much of the passages. For helping humans with evaluations, [ FPP+20] help humans fact-check claims faster and more accurately with natural language briefs. [ GSR19 ] use language models to help humans discriminate whether text was generated by a model. Critique datasets and models. [TVCM18 ] introduce a dataset of factual claims, along with supporting and refuting evidence. [ KAD+18] introduce a dataset of critical peer reviews. [ BCV16 ] mines disagreements from Twitter, and [ ZCP17 ,PBSM+21] from Reddit. [ MST+21] introduce a dataset of story critiques. For model generated critiques, IBM’s Project Debater [ SBA+21] trains models to engage in free text debates, including the ability to rebut arguments. Unlike our work, they focus on debating against humans rather than models. Natural language reﬁnements. Human natural language feedback has been used to improve models in many domains, such as computer vision [ RLN+18], program synthesis [ EHA20 ,AON+21], and summarization [ SCC+22]. [PTA+21] use large language models to ﬁx security vulnerabilities 6We initially tried other settings which did not qualitatively change results but made win rates closer to 50% and error bars larger. 17in code. More recently, [ WWS+22b] propose using language models’ own outputs to improve their answers on math word problems. 7 Discussion We view our results as a proof of concept for feedback assistance as a solution to the problem of scalable oversight: Even though topic-based summarization isn’t actually a hard task for human labelers, in our experiments we still see signiﬁcant gains from AI assistance in the form of critiques. 7.1 Implications for alignment research 1.Large language models are already capable enough to meaningfully assist human evaluation and the scaling trend in Figure 4 suggests that larger models may improve at assisting in evaluating their own outputs. The publicly available InstructGPT models are capable of critiquing well few-shot and even zero-shot (Figure 3). Overall, we believe there is potential to do empirical experiments for scalable oversight with today’s models, using schemes similar to reward modeling [LKE+18] or debate [IA19]. 2.Generator-discriminator-critique gaps are promising ways to measure alignment properties of models. Studying gaps give us insight into quality of base task training signal without training those models (see Appendix C.3). Increasing the critique performance relative to generator and discriminator performance is an under-explored research area, where results should directly translate into better-aligned models. Studying gaps can also happen on smaller models in synthetic domains, like those in Table 3. 3.Learning from natural language feedback is feasible now. Feedback in preference learning [CLB+17] is very information-sparse, and humans typically spend several minutes on a comparison yielding a single bit of information. Ideally, models could use human natural language feedback to improve their own outputs [ SCC+22]. In Section 4.3, we showed models can now condition on critiques as a form of feedback to improve their own outputs, results corroborated by recent works on "chain of thought" [ WWS+22b]. This suggests teaching models with natural language feedback from humans is a very promising direction. 7.2 Limitations 1.Lack of ground truth. Our base task of topic-based summarization does not have a robust or objective process for validating the quality of the answers or critiques. (a)Labelers may be misevaluating answers, by trusting the model summaries too much or by simply making mistakes. (b)Some critiques found by the labelers using assistance were fairly unimportant or nitpicky. Agreement rate on comparisons of critiques (i.e. helpfulness rankings) were no higher than answer comparisons; both were around 75%. (c)Misleading critiques of good outputs may be indistinguishable from good critiques of poor outputs. (d)More broadly, we do not address how to measure ground truth, which makes this research difﬁcult. Our work relies on labelers, who already make mistakes and will be increasingly unreliable for harder tasks. 2.Assuming articulable reasoning. Our overall research direction does not address how to surface problematic outputs where a model cannot put into words what the problem is, which may be a core difﬁculty of the alignment problem [ CCX21 ]. The CDgap could remain large after much effort using assistance. 