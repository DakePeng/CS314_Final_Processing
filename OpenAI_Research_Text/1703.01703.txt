Published as a conference paper at ICLR 2017 THIRD -PERSON IMITATION LEARNING Bradly C. Stadie1;2, Pieter Abbeel1;3, Ilya Sutskever1 1OpenAI 2UC Berkeley, Department of Statistics 3UC Berkeley, Departments of EECS and ICSI fbstadie, pieter, ilyasu, g@openai.com ABSTRACT Reinforcement learning (RL) makes it possible to train agents capable of achieving sophisticated goals in complex and uncertain environments. A key difﬁculty in reinforcement learning is specifying a reward function for the agent to optimize. Traditionally, imitation learning in RL has been used to overcome this problem. Unfortunately, hitherto imitation learning methods tend to require that demonstrations are supplied in the ﬁrst-person : the agent is provided with a sequence of states and a speciﬁcation of the actions that it should have taken. While powerful, this kind of imitation learning is limited by the relatively hard problem of collecting ﬁrst-person demonstrations. Humans address this problem by learning from third-person demonstrations: they observe other humans perform tasks, infer the task, and accomplish the same task themselves. In this paper, we present a method for unsupervised third-person imitation learning. Here third-person refers to training an agent to correctly achieve a simple goal in a simple environment when it is provided a demonstration of a teacher achieving the same goal but from a different viewpoint; and unsupervised refers to the fact that the agent receives only these third-person demonstrations, and is notprovided a correspondence between teacher states and student states. Our methods primary insight is that recent advances from domain confusion can be utilized to yield domain agnostic features which are crucial during the training process. To validate our approach, we report successful experiments on learning from third-person demonstrations in a pointmass domain, a reacher domain, and inverted pendulum. 1 I NTRODUCTION Reinforcement learning (RL) is a framework for training agents to maximize rewards in large, unknown, stochastic environments. In recent years, combining techniques from deep learning with reinforcement learning has yielded a string of successful applications in game playing and robotics Mnih et al. (2015; 2016); Schulman et al. (2015a); Levine et al. (2016). These successful applications, and the speed at which the abilities of RL algorithms have been increasing, makes it an exciting area of research with signiﬁcant potential for future applications. One of the major weaknesses of RL is the need to manually specify a reward function. For each task we wish our agent to accomplish, we must provide it with a reward function whose maximizer will precisely recover the desired behavior. This weakness is addressed by the ﬁeld of Inverse Reinforcement Learning (IRL). Given a set of expert trajectories, IRL algorithms produce a reward function under which these the expert trajectories enjoy the property of optimality. Recently, there has been a signiﬁcant amount of work on IRL, and current algorithms can infer a reward function from a very modest number of demonstrations (e.g,. Abbeel & Ng (2004); Ratliff et al. (2006); Ziebart et al. (2008); Levine et al. (2011); Ho & Ermon (2016); Finn et al. (2016)). While IRL algorithms are appealing, they impose the somewhat unrealistic requirement that the demonstrations should be provided from the ﬁrst-person point of view with respect to the agent. Human beings learn to imitate entirely from third-person demonstrations – i.e., by observing other humans achieve goals. Indeed, in many situations, ﬁrst-person demonstrations are outright impossible to obtain. Meanwhile, third-person demonstrations are often relatively easy to obtain. 1arXiv:1703.01703v2  [cs.LG]  22 Sep 2019Published as a conference paper at ICLR 2017 The goal of this paper is to develop an algorithm for third-person imitation learning. Future advancements in this class of algorithms would signiﬁcantly improve the state of robotics, because it will enable people to easily teach robots news skills and abilities. Importantly, we want our algorithm to be unsupervised : it should be able to observe another agent perform a task, infer that there is an underlying correspondence to itself, and ﬁnd a way to accomplish the same task. We offer an approach to this problem by borrowing ideas from domain confusion Tzeng et al. (2014) and generative adversarial networks (GANs) Goodfellow et al. (2014). The high-level idea is to introduce an optimizer under which we can recover both a domain-agnostic representation of the agent’s observations, and a cost function which utilizes this domain-agnostic representation to capture the essence of expert trajectories. We formulate this as a third-person RL-GAN problem, and our solution builds on the ﬁrst-person RL-GAN formulation by Ho & Ermon (2016). Surprisingly, we ﬁnd that this simple approach has been able to solve the problems that are presented in this paper (illustrated in Figure 1), even though the student’s observations are related in a complicated way to the teacher’s demonstrations (given that the observations and the demonstrations are pixel-level). As techniques for training GANs become more stable and capable, we expect our algorithm to be able to infer solve harder third-person imitation tasks without any direct supervision. Figure 1: From left to right, the three domains we consider in this paper: pointmass, reacher, and pendulum. Top-row is the third-person view of a teacher demonstration. Bottom row is the agent’s view in their version of the environment. For the point and reacher environments, the camera angles differ by approximately 40 degrees. For the pendulum environment, the color of the pole differs. 2 R ELATED WORK Imitation learning (also learning from demonstrations or programming by demonstration) considers the problem of acquiring skills from observing demonstrations. Imitation learning has a long history, with several good survey articles, including (Schaal, 1999; Calinon, 2009; Argall et al., 2009). Two main lines of work within imitation learning are: 1) behavioral cloning, where the demonstrations are used to directly learn a mapping from observations to actions using supervised learning, potentially with interleaving learning and data collection (e.g., Pomerleau (1989); Ross et al. (2011)). 2) Inverse reinforcement learning (Ng et al., 2000), where a reward function is estimated that explains the demonstrations as (near) optimal behavior. This reward function could be represented as nearness to a trajectory (Calinon et al., 2007; Abbeel et al., 2010), as a weighted combination of features (Abbeel & Ng, 2004; Ratliff et al., 2006; Ramachandran & Amir, 2007; Ziebart et al., 2008; Boularias et al., 2011; Kalakrishnan et al., 2013; Doerr et al., 2015), or could also involve feature learning (Ratliff et al., 2007; Levine et al., 2011; Wulfmeier et al., 2015; Finn et al., 2016; Ho & Ermon, 2016). 2Published as a conference paper at ICLR 2017 This past work, however, is not directly applicable to the third person imitation learning setting. In third-person imitation learning, the observations and actions obtained from the demonstrations arenotthe same as what the imitator agent will be faced with. A typical scenario would be: the imitator agent watches a human perform a demonstration, and then has to execute that same task. As discussed in Nehaniv & Dautenhahn (2001) the ”what and how to imitate” questions become signiﬁcantly more challenging in this setting. To directly apply existing behavioral cloning or inverse reinforcement learning techniques would require knowledge of a mapping between observations and actions in the demonstrator space to observations and actions in the imitator space. Such a mapping is often difﬁcult to obtain, and it typically relies on providing feature representations that captures the invariance between both environments Carpenter et al. (2002); Shon et al. (2005); Calinon et al. (2007); Nehaniv (2007); Gioioso et al. (2013); Gupta et al. (2016). Contrary to prior work, we consider third-person imitation learning from raw sensory data, where no such features are made available. The most closely related work to ours is by Finn et al. (2016); Ho & Ermon (2016); Wulfmeier et al. (2015), who also consider inverse reinforcement learning directly from raw sensory data. However, the applicability of their approaches is limited to the ﬁrst-person setting. Indeed, matching raw sensory observations is impossible in the 3rd person setting. Our work also closely builds on advances in generative adversarial networks Goodfellow et al. (2014), which are very closely related to imitation learning as explained in Finn et al. (2016); Ho & Ermon (2016). In our optimization formulation, we apply the gradient ﬂipping technique from Ganin & Lempitsky (2014). The problem of adapting what is learned in one domain to another domain has been studied extensively in computer vision in the supervised learning setting Yang et al. (2007); Mansour et al. (2009); Kulis et al. (2011); Aytar & Zisserman (2011); Duan et al. (2012); Hoffman et al. (2013); Long & Wang (2015). It has also been shown that features trained in one domain can often be relevant to other domains Donahue et al. (2014). The work most closely related to ours is Tzeng et al. (2014; 2015), who also consider an explicit domain confusion loss, forcing trained classiﬁers to rely on features that don’t allow to distinguish between two domains. This work in turn relates to earlier work by Bromley et al. (1993); Chopra et al. (2005), which also considers supervised training of deep feature embeddings. Our approach to third-person imitation learning relies on reinforcement learning from raw sensory data in the imitator domain. Several recent advances in deep reinforcement learning have made this practical, including Deep Q-Networks (Mnih et al., 2015), Trust Region Policy Optimization (Schulman et al., 2015a), A3C Mnih et al. (2016), and Generalized Advantage Estimation (Schulman et al., 2015b). Our approach uses Trust Region Policy Optimization. 3 B ACKGROUND AND PRELIMINARIES A discrete-time ﬁnite-horizon discounted Markov decision process (MDP) is represented by a tuple M= (S;A;P;r; 0; ;T ), in whichSis a state set,Aan action set,P:SAS! R+a transition probability distribution, r:SA! Ra reward function, 0:S!R+an initial state distribution,  2[0;1]a discount factor, and Tthe horizon. In the reinforcement learning setting, the goal is to ﬁnd a policy :SA! R+parametrized bythat maximizes the expected discounted sum of rewards incurred, () =E[PT t=0 tc(st)], wheres00(s0),at(atjst), andst+1P(st+1jst;at). In the (ﬁrst-person) imitation learning setting, we are not given the reward function. Instead we are given traces (i.e., sequences of states traversed) by an expert who acts according to an unknown policyE. The goal is to ﬁnd a policy that performs as well as the expert against the unknown reward function. It was shown in Abbeel & Ng (2004) that this can be achieved through inverse reinforcement learning by ﬁnding a policy that matches the expert’s empirical expectation over discounted sum of all features that might contribute to the reward function. The work by Ho & Ermon (2016) generalizes this to the setting when no features are provided as follows: Find a policy that makes it impossible for a discriminator (in their work a deep neural net) to distinguish states visited by the expert from states visited by the imitator agent. This can be formalized as follows: 3Published as a conference paper at ICLR 2017 max min DR E[logDR(s)] EE[log(1 DR(s))] (1) Here, the expectations are over the states experienced by the policy of the imitator agent, , and by the policy of the expert, E, respectively.DRis the discriminator, which outputs the probability of a state having originated from a trace from the imitator policy . If the discriminator is perfectly able to distinguish which policy originated state-action pairs, then DRwill consistently output a probability of 1 in the ﬁrst term, and a probability of 0 in the second term, making the objective its lowest possible value of zero. It is the role of the imitator agent to ﬁnd a policy that makes it difﬁcult for the discriminator to make that distinction. The desired equilibrium has the imitator agent making it impractical for the discriminator to distinguish, hence forcing the discriminator to assign probability 0.5 in all cases. Ho & Ermon (2016) present a practical approach for solving this type of game when representing both andDRas deep neural networks. Their approach repeatedly performs gradient updates on each of them. Concretely, for a current policy traces can be collected, which together with the expert traces form a data-set on which DRcan be trained with supervised learning minimizing the negative log-likelihood (in practice only performing a modest number of updates). For a ﬁxed DR, this is a policy optimization problem where  logDR(s;a) is the reward, and policy gradients can be computed from those same traces. Their approach uses trust region policy optimization (Schulman et al., 2015a) to update the imitator policy from those gradients. In our work we will have more terms in the objective, so for compactness of notation, we will realize the discriminative minimization from Eqn. (1) as follows: max min DRLR=X iCE(DR(si);c`i) (2) Wheresiis statei,c`iis the correct class label (was the state siobtained from an expert vs. from a non-expert), and CEis the standard cross entropy loss. 4 A F ORMAL DEFINITION OFTHETHIRD -PERSON IMITATION LEARNING PROBLEM Formally, the third-person imitation learning problem can be stated as follows. Suppose we are given two Markov Decision Processes MEandM. Suppose further there exists a set of traces = f(s1;:::;sn)gn i=0which were generated under a policy Eacting optimally under some unknown rewardRE. In third-person imitation learning, one attempts to recover by proxy through a policy =f()which acts optimally with respect to R. 5 A T HIRD -PERSON IMITATION LEARNING ALGORITHM 5.1 G AME FORMULATION In this section, we discuss a simple algorithm for third-person imitation learning. This algorithm is able to successfully discriminate between expert and novice policies, even when the policies are executed under different environments. Subsequently, this discrimination signal can be used to train expert policies in new domains via RL by training the novice policy to fool the discriminator, thus forcing it to match the expert policy. In third-person learning, observations are more typically available rather than direct state access, so going forward we will work with observations otinstead of states stas representing the expert traces. The top row of Figure 8 illustrates what these observations are like in our experiments. We begin by recalling that in the algorithm proposed by Ho & Ermon (2016) the loss in Equation 2 is utilized to train a discriminator DRcapable of distinguishing expert vs non-expert policies. Unfortunately, (2) will likely fail in cases when the expert and non-expert act in different environments, sinceDRwill quickly learn these differences and use them as a strong classiﬁcation signal. To handle the third-person setting, where expert and novice are in different environments, we consider thatDRworks by ﬁrst extracting features from ot, and then using these features to make a 4Published as a conference paper at ICLR 2017 classiﬁcation. Suppose then that we partition DRinto a feature extractor DFand the actual classiﬁer which assigns probabilities to the outputs of DF. Overloading notation, we will refer to the classiﬁer asDRgoing forward. For example, in case of a deep neural net representation, DFwould correspond to the earlier layers, and DRto the later layers. The problem is then to ensure that DF contains no information regarding the rollout’s domain label d`(i.e., expert vs. novice domain). This can be realized as max minLR=X iCE(DR(DF(oi));c`i) s.t.MI(DF(oi);dl) = 0 Where MIis mutual information and hence we have abused notation by using DR,DF, andd`to mean the classiﬁer, feature extractor, and the domain label respectively as well as distributions over these objects. The mutual information term can be instantiated by introducing another classiﬁer DD, which takes features produced by DFand outputs the probability that those features were produced by in the expert vs. non-expert environment. (See Bridle et al. (1992); Barber & Agakov (2005); Krause et al. (2010); Chen et al. (2016) for further discussion on instantiating the information term by introducing another classiﬁer.) If i=DF(oi), then the problem can be written as max min DRmax DDLR+LD=X iCE(DR(i);c`i) +CE(DD(i);d`i) (3) In words, we wish to minimize class loss while maximizing domain confusion. Often, it can be difﬁcult for even humans to judge a static image as expert vs. non-expert because it does not convey any information about the environmental change affected by the agent’s actions. For example, if a pointmass is attempting to move to a target location and starts far away from its goal state, it can be difﬁcult to judge if the policy itself is bad or the initialization was simply unlucky. In response to this difﬁculty, we give DRaccess to not only the image at time t, but also at some future timet+n. Deﬁnet=DF(ot)andt+n=DF(ot+n). The classiﬁer then makes a prediction DR(t;t+n) = ^c`. This renders the following formulation: max min DRmax DDLR+LD=X iCE(DR(i;i+n);c`i) +CE(DD(i);d`i) (4) Note we also want to optimize over DF, the feature extractor, but it feeds both into DRand intoDD, which are competing (hidden under ), which we will address now. To deal with the competition over DF, we introduce a function Gthat acts as the identity when moving forward through a directed acyclic graph and ﬂips the sign when backpropagating through the graph. This technique has enjoyed recent success in computer vision. See, for example, (Ganin & Lempitsky, 2014). With this trick, the problem reduces to its ﬁnal form max min DR;DD;DFLR+LD=X iCE(DR(i;i+n);c`i) +CE (DD(G(i);d`i) (5) In Equation (5), we ﬂip the gradient’s sign during backpropagation of DFwith respect to the domain classiﬁcation loss. This corresponds to stochastic gradient ascent away from features that are useful for domain classiﬁcation, thus ensuring that DFproduces domain agnostic features. Equation 5 can be solved efﬁciently with stochastic gradient descent. Here is a hyperparameter that determines the trade-off made between the objectives that are competing over DF. To ensure sufﬁcient signal for discrimination between expert and non-expert, we collect third-person demonstrations in the expert domain from both an expert and from a non-expert. Our complete formulation is graphically summarized in Figure 2. 5Published as a conference paper at ICLR 2017 Figure 2: Architecture diagram for third-person imitation learning. Images at time tandt+ 4are sent through a feature extractor to obtain F(ot)andF(ot+4). Subsequently, these feature vectors are reused in two places. First, they are concatenated and used to predict whether the samples are drawn from expert or non-expert trajectories. Second, F(ot)is utilized to predict a domain label (expert vs. novice domain). During backpropogation, the sign on the domain loss LDis ﬂipped to destroy information that was useful for distinguishing the two domains. This ensures that the feature extractor Fis domain agnostic. Finally, the classes probabilities that were computed using this domain-agnostic feature vector are utilized as a cost signal in TRPO; which is subsequently utilized to train the novice policy to take expert-like actions and collect further rollouts. 5.2 A LGORITHM To solve the game formulation in Equation (5), we perform alternating (partial) optimization over the policyand the reward function and domain confusion encoded through DR;DD;DF. The optimization over DR;DD;DFis done through stochastic gradient descent with ADAM Kingma & Ba (2014). Our generator ( ) step is similar to the generator step in the algorithm by (Ho & Ermon, 2016). We simply use logDRas the reward. Using policy gradient methods (TRPO), we train the generator to minimize this cost and thus push the policy further towards replicating expert behavior. Once the generator step is done, we start again with the discriminator step. The entire process is summarized in algorithm 1. 6 E XPERIMENTS We seek to answer the following questions through experiments: 1. Is it possible to solve the third-person imitation learning problem in simple settings? I.e., given a collection of expert image-based rollouts in one domain, is it possible to train a policy in a different domain that replicates the essence of the original behavior? 2. Does the algorithm we propose beneﬁt from both domain confusion and velocity? 3. How sensitive is our proposed algorithm to the selection of hyper-parameters used in deployment? 4. How sensitive is our proposed algorithm to changes in camera angle? 5. How does our method compare against some reasonable baselines? 6Published as a conference paper at ICLR 2017 Algorithm 1 A third-person imitation learning algorithm. 1:Let CE be the standard cross entropy loss. 2:LetGbe a function that ﬂips the gradient sign during backpropogation and acts as the identity map otherwise. 3:Initialize two domains, EandNfor the expert and novice. 4:Initialize a memory bank  of expert success and of failure in domain E. Each trajectory !2 comprises a rollout of images o=o1;:::;ot;:::on, a class label c`, and a domain label d`. 5:InitializeD=DF;DR;DD, a domain invariant discriminator. 6:Initialize a novice policy . 7:Initialize numiters, the number of inner policy optimization iterations we wish to run. 8:foriter in numiters do 9: Sample a set of successes and failures !Efrom  . 10: Collect on policy samples !N 11: Set!=!E[!N. 12: Shufﬂe! 13: foro;c`;d`in!do 14: forotinodo 15:t=DF(ot) 16:t+4=DF(ot+4) 17:LR=CE(DR(t;t+4);c`) 18:Ld=CE(DD(G(t));d`) 19:L=Ld+LR1 20: minimizeLwith ADAM. 21: end for 22: end for 23: Collect on policy samples !Nfrom. 24: for!in!Ndo 25: for!tin!do 26:t=DF(ot) 27:t+4=DF(ot+4) 28: ^c`=DR(t;t+4) 29:r= ^c`, the probability that ot;ot+4were generated via expert rollouts. 30: Userto trainwith via policy gradients (TRPO). 31: end for 32: end for 33:end for 34:return optimized policy  6.1 E NVIRONMENTS To evaluate our algorithm, we consider three environments in the MuJoCo physics simulator. There are two different versions of each environment, an expert variant and a novice variant. Our goal is to train a cost function that is domain agnostic, and hence can be trained with images on the expert domain but nevertheless produce a reasonable cost on the novice domain. See Figure 1 for a visualization of the differences between expert and novice environments for the three tasks. Point: A pointmass attempts to reach a point in a plane. The color of the target and the camera angle change between domains. Reacher: A two DOF arm attempts to reach a designated point in the plane. The camera angle, the length of the arms, and the color of the target point are changed between domains. Note that changing the camera angle signiﬁcantly alters the image background color from largely gray to roughly 30 percent black. This presents a signiﬁcant challenge for our method. Inverted Pendulum: A classic RL task wherein a pendulum must be made to balance via control. For this domain, We only change the color of the pendulum and not the camera angle. Since there is no target point, we found that changing the camera angle left the domain invariant representations with too little information and resulted in a failure case. In contrast to some traditional renderings 7Published as a conference paper at ICLR 2017 of this problem, we do not terminate an episode when the agent falls but rather allow data collection to continue for a ﬁxed horizon. 6.2 E VALUATIONS Is it possible to solve the third-person imitation learning problem in simple settings? In Figure 3, we see that our proposed algorithm is indeed able to recover reasonable policies for all three tasks we examined. Initially, the training is quite unstable due to the domain confusion wreaking havoc on the learned cost. However, after several iterations the policies eventually head towards reasonable local minima and the standard deviation over the reward distribution shrinks substantially. Finally, we note that the extracted feature representations used to complete this task are in fact domain-agnostic, as seen in Figure 9. Hence, the learning is properly taking place from a third-person perspective. Figure 3: Reward vs training iteration for reacher, inverted pendulum, and point environments. The learning curves are averaged over 5 trials with error bars represent one standard deviation in the reward distribution at the given point. Figure 4: Domain accuracy vs. training iteration for reacher, inverted pendulum, and point environments. Does the algorithm we propose beneﬁt from both domain confusion and the multi-time step input? We answer this question with the experiments summarized in Figure 5. This experiment compares our approach with: (i) our approach without the domain confusion loss; (ii) our approach without the multi-time step input; (iii) our approach without the domain confusion loss and without the multitime step input (which is very similar to the approach in Ho & Ermon (2016)). We see that adding domain confusion is essential for getting strong performance in all three experiments. Meanwhile, adding multi-time step input marginally improves the results. See also Figure 7 for an analysis of the effects of multi-time step input on the ﬁnal results. Figure 5: Reward vs iteration for reacher, inverted pendulum, and point environments with no domain confusion and no velocity (red), domain confusion (orange), velocity (brown), and both domain confusion and velocity (blue). 8Published as a conference paper at ICLR 2017 How sensitive is our proposed algorithm to the selection of hyper-parameters used in deployment? Figure 6 shows the effect of the domain confusion coefﬁcient , which trades off how much we should weight the domain confusion objective vs. the standard cost-recovery objective, on the ﬁnal performance of the algorithm. Setting too low results in slower learning and features that are not domain-invariant. Setting too high results in an objective that is too quick to destroy information, which makes it impossible to recover an accurate cost. For multi-time step input, one must choose the number of look-ahead frames that are utilized. If too small a window is chosen, the agent’s actions have not affected a large amount of change in the environment and it is difﬁcult to discern any additional class signal over static images. If too large a time-frame passes, causality becomes difﬁcult to interpolate and the agent does worse than simply being trained on static frames. Figure 7 illustrates that no number of look-ahead frames is consistently optimal across tasks. However, a value of 4showed good performance over all tasks, and so this value was utilized in all other experiments. Figure 6: Reward of ﬁnal trained policy vs domain confusion weight for reacher, inverted pendulum, and point environments. Figure 7: Reward of ﬁnal trained policy vs number of look-ahead frames for reacher, inverted pendulum, and point environments. How sensitive is our algorithm to changes in camera angle? We present graphs for the reacher and point experiments wherein we exam the ﬁnal reward obtained by a policy trained with thirdperson imitation learning vs the camera angle difference between the ﬁrst-person and third-person perspective. We omit the inverted double pendulum experiment, as the color and not the camera angle changes in that setting and we found the case of slowly transitioning the color to be the deﬁnition of uninteresting science. 9Published as a conference paper at ICLR 2017 Figure 8: Point and reacher ﬁnal reward after 20 epochs of third-person imitation learning vs the camera angle difference between the ﬁrst and third-person perspective. We see that the point follows a fairly linear slope in regards to camera angle differences, whereas the reacher environment is more stochastic against these changes. Figure 9: Learning curves for third-person imitation vs. three baselines: 1)RL with true reward, 2) ﬁrst-person imitation, 3) attempting to use ﬁrst-person features on the third-person agent. How does our method compare against reasonable baselines? We consider the following baselines for comparisons against third-person imitation learning. 1) Standard reinforcement learning with using full state information and the true reward signal. This agent is trained via TRPO. 2) 10Published as a conference paper at ICLR 2017 Standard GAIL (ﬁrst-person imitation learning). Here, the agent receives ﬁrst-person demonstration and attempts to imitate the correct behavior. This is an upper bound on how well we can expect to do, since we have the correct perspective. 3) Training a policy using ﬁrst-person data and applying it to the third-person environment. We compare all three of these baselines to third-person imitation learning. As we see in ﬁgure 9: 1) Standard RL, which (unlike the imitation learning approaches) has access to full state and true reward, helps calibrate performance of the other approaches. 2) First-person imitation learning is faced with a simpler imitation problem and accordingly outperforms third-person imitation, yet third-person imitation learning is nevertheless competitive. 3) Applying the ﬁrst-person policy to the third-person agent fails miserably, illustrating that explicitly considering third-person imitation is important in these settings. Somewhat unfortunately, the different reward function scales make it difﬁcult to capture information on the variance of each learning curve. Consequently, in Appendix A we have included the full learning curves for these experiments with variance bars, each plotted with an appropriate scale to examine the variance of the individual curves. 7 D ISCUSSION AND FUTURE WORK In this paper, we presented the problem of third-person imitation learning. We argue that this problem will be important going forward, as techniques in reinforcement learning and generative adversarial learning improve and the cost of collecting ﬁrst-person samples remains high. We presented an algorithm which builds on Generative Adversarial Imitation Learning and is capable of solving simple third-person imitation tasks. One promising direction of future work in this area is to jointly train policy features and cost features at the pixel level, allowing the reuse of image features. Code to train a third person imitation learning agent on the domains from this paper is presented here: https://github.com/bstadie/ third_person_im ACKNOWLEDGEMENTS This work was done partially at OpenAI and partially at Berkeley. Work done at Berkeley was supported in part by Darpa under the Simplex program and the FunLoL program. 